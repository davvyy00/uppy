{"version":3,"sources":["../../../src/plugins/ThumbnailGenerator/index.js"],"names":["Plugin","require","dataURItoBlob","isPreviewSupported","module","exports","uppy","opts","type","id","title","queue","queueProcessing","defaultOptions","thumbnailWidth","addToQueue","bind","onRestored","createThumbnail","file","targetWidth","originalUrl","URL","createObjectURL","data","onload","resolve","reject","image","Image","src","revokeObjectURL","onerror","Error","then","targetHeight","getProportionalHeight","canvas","resizeImage","canvasToBlob","blob","protect","ratio","width","height","maxSquare","maxSize","maxW","Math","floor","sqrt","maxH","round","document","createElement","getContext","drawImage","steps","ceil","log","LOG2E","sW","pow","sH","x","quality","toBlob","toDataURL","img","aspect","setPreviewURL","fileID","preview","setFileState","item","push","processQueue","length","current","shift","requestThumbnail","catch","isRemote","console","warn","err","stack","message","fileIDs","Object","keys","getState","files","forEach","getFile","isRestored","test","install","on","uninstall","off"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../../core/Plugin')\r\nconst dataURItoBlob = require('../../utils/dataURItoBlob')\r\nconst isPreviewSupported = require('../../utils/isPreviewSupported')\r\n\r\n/**\r\n * The Thumbnail Generator plugin\r\n *\r\n */\r\n\r\nmodule.exports = class ThumbnailGenerator extends Plugin {\r\n  constructor (uppy, opts) {\r\n    super(uppy, opts)\r\n    this.type = 'thumbnail'\r\n    this.id = this.opts.id || 'ThumbnailGenerator'\r\n    this.title = 'Thumbnail Generator'\r\n    this.queue = []\r\n    this.queueProcessing = false\r\n\r\n    const defaultOptions = {\r\n      thumbnailWidth: 200\r\n    }\r\n\r\n    this.opts = Object.assign({}, defaultOptions, opts)\r\n\r\n    this.addToQueue = this.addToQueue.bind(this)\r\n    this.onRestored = this.onRestored.bind(this)\r\n  }\r\n\r\n  /**\r\n   * Create a thumbnail for the given Uppy file object.\r\n   *\r\n   * @param {{data: Blob}} file\r\n   * @param {number} width\r\n   * @return {Promise}\r\n   */\r\n  createThumbnail (file, targetWidth) {\r\n    const originalUrl = URL.createObjectURL(file.data)\r\n    const onload = new Promise((resolve, reject) => {\r\n      const image = new Image()\r\n      image.src = originalUrl\r\n      image.onload = () => {\r\n        URL.revokeObjectURL(originalUrl)\r\n        resolve(image)\r\n      }\r\n      image.onerror = () => {\r\n        // The onerror event is totally useless unfortunately, as far as I know\r\n        URL.revokeObjectURL(originalUrl)\r\n        reject(new Error('Could not create thumbnail'))\r\n      }\r\n    })\r\n\r\n    return onload\r\n      .then(image => {\r\n        const targetHeight = this.getProportionalHeight(image, targetWidth)\r\n        const canvas = this.resizeImage(image, targetWidth, targetHeight)\r\n        return this.canvasToBlob(canvas, 'image/png')\r\n      })\r\n      .then(blob => {\r\n        return URL.createObjectURL(blob)\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Make sure the image doesnâ€™t exceed browser/device canvas limits.\r\n   * For ios with 256 RAM and ie\r\n   */\r\n  protect (image) {\r\n    // https://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element\r\n\r\n    var ratio = image.width / image.height\r\n\r\n    var maxSquare = 5000000  // ios max canvas square\r\n    var maxSize = 4096  // ie max canvas dimensions\r\n\r\n    var maxW = Math.floor(Math.sqrt(maxSquare * ratio))\r\n    var maxH = Math.floor(maxSquare / Math.sqrt(maxSquare * ratio))\r\n    if (maxW > maxSize) {\r\n      maxW = maxSize\r\n      maxH = Math.round(maxW / ratio)\r\n    }\r\n    if (maxH > maxSize) {\r\n      maxH = maxSize\r\n      maxW = Math.round(ratio * maxH)\r\n    }\r\n    if (image.width > maxW) {\r\n      var canvas = document.createElement('canvas')\r\n      canvas.width = maxW\r\n      canvas.height = maxH\r\n      canvas.getContext('2d').drawImage(image, 0, 0, maxW, maxH)\r\n      image.src = 'about:blank'\r\n      image.width = 1\r\n      image.height = 1\r\n      image = canvas\r\n    }\r\n\r\n    return image\r\n  }\r\n\r\n  /**\r\n   * Resize an image to the target `width` and `height`.\r\n   *\r\n   * Returns a Canvas with the resized image on it.\r\n   */\r\n  resizeImage (image, targetWidth, targetHeight) {\r\n    // Resizing in steps refactored to use a solution from\r\n    // https://blog.uploadcare.com/image-resize-in-browsers-is-broken-e38eed08df01\r\n\r\n    image = this.protect(image)\r\n\r\n    // Use the Polyfill for Math.log2() since IE doesn't support log2\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2#Polyfill\r\n    var steps = Math.ceil(Math.log(image.width / targetWidth) * Math.LOG2E)\r\n    if (steps < 1) {\r\n      steps = 1\r\n    }\r\n    var sW = targetWidth * Math.pow(2, steps - 1)\r\n    var sH = targetHeight * Math.pow(2, steps - 1)\r\n    var x = 2\r\n\r\n    while (steps--) {\r\n      var canvas = document.createElement('canvas')\r\n      canvas.width = sW\r\n      canvas.height = sH\r\n      canvas.getContext('2d').drawImage(image, 0, 0, sW, sH)\r\n      image = canvas\r\n\r\n      sW = Math.round(sW / x)\r\n      sH = Math.round(sH / x)\r\n    }\r\n\r\n    return image\r\n  }\r\n\r\n  /**\r\n   * Save a <canvas> element's content to a Blob object.\r\n   *\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @return {Promise}\r\n   */\r\n  canvasToBlob (canvas, type, quality) {\r\n    if (canvas.toBlob) {\r\n      return new Promise(resolve => {\r\n        canvas.toBlob(resolve, type, quality)\r\n      })\r\n    }\r\n    return Promise.resolve().then(() => {\r\n      return dataURItoBlob(canvas.toDataURL(type, quality), {})\r\n    })\r\n  }\r\n\r\n  getProportionalHeight (img, width) {\r\n    const aspect = img.width / img.height\r\n    return Math.round(width / aspect)\r\n  }\r\n\r\n  /**\r\n   * Set the preview URL for a file.\r\n   */\r\n  setPreviewURL (fileID, preview) {\r\n    this.uppy.setFileState(fileID, {\r\n      preview: preview\r\n    })\r\n  }\r\n\r\n  addToQueue (item) {\r\n    this.queue.push(item)\r\n    if (this.queueProcessing === false) {\r\n      this.processQueue()\r\n    }\r\n  }\r\n\r\n  processQueue () {\r\n    this.queueProcessing = true\r\n    if (this.queue.length > 0) {\r\n      const current = this.queue.shift()\r\n      return this.requestThumbnail(current)\r\n        .catch(err => {}) // eslint-disable-line handle-callback-err\r\n        .then(() => this.processQueue())\r\n    } else {\r\n      this.queueProcessing = false\r\n    }\r\n  }\r\n\r\n  requestThumbnail (file) {\r\n    if (isPreviewSupported(file.type) && !file.isRemote) {\r\n      return this.createThumbnail(file, this.opts.thumbnailWidth)\r\n        .then(preview => {\r\n          this.setPreviewURL(file.id, preview)\r\n        })\r\n        .catch(err => {\r\n          console.warn(err.stack || err.message)\r\n        })\r\n    }\r\n    return Promise.resolve()\r\n  }\r\n\r\n  onRestored () {\r\n    const fileIDs = Object.keys(this.uppy.getState().files)\r\n    fileIDs.forEach((fileID) => {\r\n      const file = this.uppy.getFile(fileID)\r\n      if (!file.isRestored) return\r\n      // Only add blob URLs; they are likely invalid after being restored.\r\n      if (!file.preview || /^blob:/.test(file.preview)) {\r\n        this.addToQueue(file)\r\n      }\r\n    })\r\n  }\r\n\r\n  install () {\r\n    this.uppy.on('file-added', this.addToQueue)\r\n    this.uppy.on('restored', this.onRestored)\r\n  }\r\n  uninstall () {\r\n    this.uppy.off('file-added', this.addToQueue)\r\n    this.uppy.off('restored', this.onRestored)\r\n  }\r\n}\r\n"]}