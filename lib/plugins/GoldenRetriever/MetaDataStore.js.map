{"version":3,"sources":["../../../src/plugins/GoldenRetriever/MetaDataStore.js"],"names":["findUppyInstances","instances","i","localStorage","length","key","test","push","slice","maybeParse","str","JSON","parse","err","cleanedUp","module","exports","opts","expires","name","storeName","MetaDataStore","cleanup","load","savedState","getItem","data","metadata","save","Date","now","state","stringify","setItem","instanceIDs","forEach","id","obj","removeItem"],"mappings":";;;;AAAA;;;AAGA,SAASA,iBAAT,GAA8B;AAC5B,MAAMC,YAAY,EAAlB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIC,aAAaC,MAAjC,EAAyCF,GAAzC,EAA8C;AAC5C,QAAMG,MAAMF,aAAaE,GAAb,CAAiBH,CAAjB,CAAZ;AACA,QAAI,cAAcI,IAAd,CAAmBD,GAAnB,CAAJ,EAA6B;AAC3BJ,gBAAUM,IAAV,CAAeF,IAAIG,KAAJ,CAAU,aAAaJ,MAAvB,CAAf;AACD;AACF;AACD,SAAOH,SAAP;AACD;;AAED;;;AAGA,SAASQ,UAAT,CAAqBC,GAArB,EAA0B;AACxB,MAAI;AACF,WAAOC,KAAKC,KAAL,CAAWF,GAAX,CAAP;AACD,GAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,WAAO,IAAP;AACD;AACF;;AAED,IAAIC,YAAY,KAAhB;AACAC,OAAOC,OAAP;AACE,yBAAaC,IAAb,EAAmB;AAAA;;AACjB,SAAKA,IAAL,GAAY,SAAc;AACxBC,eAAS,KAAK,EAAL,GAAU,EAAV,GAAe,IADA,CACK;AADL,KAAd,EAETD,IAFS,CAAZ;AAGA,SAAKE,IAAL,kBAAyBF,KAAKG,SAA9B;;AAEA,QAAI,CAACN,SAAL,EAAgB;AACdA,kBAAY,IAAZ;AACAO,oBAAcC,OAAd;AACD;AACF;;AAED;;;;;AAbF,0BAgBEC,IAhBF,mBAgBU;AACN,QAAMC,aAAarB,aAAasB,OAAb,CAAqB,KAAKN,IAA1B,CAAnB;AACA,QAAI,CAACK,UAAL,EAAiB,OAAO,IAAP;AACjB,QAAME,OAAOjB,WAAWe,UAAX,CAAb;AACA,QAAI,CAACE,IAAL,EAAW,OAAO,IAAP;;AAEX;AACA;AACA,QAAI,CAACA,KAAKC,QAAV,EAAoB;AAClB,WAAKC,IAAL,CAAUF,IAAV;AACA,aAAOA,IAAP;AACD;;AAED,WAAOA,KAAKC,QAAZ;AACD,GA9BH;;AAAA,0BAgCEC,IAhCF,iBAgCQD,QAhCR,EAgCkB;AACd,QAAMT,UAAUW,KAAKC,GAAL,KAAa,KAAKb,IAAL,CAAUC,OAAvC;AACA,QAAMa,QAAQpB,KAAKqB,SAAL,CAAe;AAC3BL,wBAD2B;AAE3BT;AAF2B,KAAf,CAAd;AAIAf,iBAAa8B,OAAb,CAAqB,KAAKd,IAA1B,EAAgCY,KAAhC;AACD,GAvCH;;AAyCE;;;;;AAzCF,gBA4CST,OA5CT,sBA4CoB;AAChB,QAAMY,cAAclC,mBAApB;AACA,QAAM8B,MAAMD,KAAKC,GAAL,EAAZ;AACAI,gBAAYC,OAAZ,CAAoB,UAACC,EAAD,EAAQ;AAC1B,UAAMV,OAAOvB,aAAasB,OAAb,gBAAkCW,EAAlC,CAAb;AACA,UAAI,CAACV,IAAL,EAAW,OAAO,IAAP;AACX,UAAMW,MAAM5B,WAAWiB,IAAX,CAAZ;AACA,UAAI,CAACW,GAAL,EAAU,OAAO,IAAP;;AAEV,UAAIA,IAAInB,OAAJ,IAAemB,IAAInB,OAAJ,GAAcY,GAAjC,EAAsC;AACpC3B,qBAAamC,UAAb,gBAAqCF,EAArC;AACD;AACF,KATD;AAUD,GAzDH;;AAAA;AAAA","file":"MetaDataStore.js","sourcesContent":["/**\r\n * Get uppy instance IDs for which state is stored.\r\n */\r\nfunction findUppyInstances () {\r\n  const instances = []\r\n  for (let i = 0; i < localStorage.length; i++) {\r\n    const key = localStorage.key(i)\r\n    if (/^uppyState:/.test(key)) {\r\n      instances.push(key.slice('uppyState:'.length))\r\n    }\r\n  }\r\n  return instances\r\n}\r\n\r\n/**\r\n * Try to JSON-parse a string, return null on failure.\r\n */\r\nfunction maybeParse (str) {\r\n  try {\r\n    return JSON.parse(str)\r\n  } catch (err) {\r\n    return null\r\n  }\r\n}\r\n\r\nlet cleanedUp = false\r\nmodule.exports = class MetaDataStore {\r\n  constructor (opts) {\r\n    this.opts = Object.assign({\r\n      expires: 24 * 60 * 60 * 1000 // 24 hours\r\n    }, opts)\r\n    this.name = `uppyState:${opts.storeName}`\r\n\r\n    if (!cleanedUp) {\r\n      cleanedUp = true\r\n      MetaDataStore.cleanup()\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  load () {\r\n    const savedState = localStorage.getItem(this.name)\r\n    if (!savedState) return null\r\n    const data = maybeParse(savedState)\r\n    if (!data) return null\r\n\r\n    // Upgrade pre-0.20.0 uppyState: it used to be just a flat object,\r\n    // without `expires`.\r\n    if (!data.metadata) {\r\n      this.save(data)\r\n      return data\r\n    }\r\n\r\n    return data.metadata\r\n  }\r\n\r\n  save (metadata) {\r\n    const expires = Date.now() + this.opts.expires\r\n    const state = JSON.stringify({\r\n      metadata,\r\n      expires\r\n    })\r\n    localStorage.setItem(this.name, state)\r\n  }\r\n\r\n  /**\r\n   * Remove all expired state.\r\n   */\r\n  static cleanup () {\r\n    const instanceIDs = findUppyInstances()\r\n    const now = Date.now()\r\n    instanceIDs.forEach((id) => {\r\n      const data = localStorage.getItem(`uppyState:${id}`)\r\n      if (!data) return null\r\n      const obj = maybeParse(data)\r\n      if (!obj) return null\r\n\r\n      if (obj.expires && obj.expires < now) {\r\n        localStorage.removeItem(`uppyState:${id}`)\r\n      }\r\n    })\r\n  }\r\n}\r\n"]}