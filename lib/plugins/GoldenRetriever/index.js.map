{"version":3,"sources":["../../../src/plugins/GoldenRetriever/index.js"],"names":["Plugin","require","ServiceWorkerStore","IndexedDBStore","MetaDataStore","module","exports","uppy","opts","type","id","title","defaultOptions","expires","serviceWorker","storeName","getID","indexedDB","saveFilesStateToLocalStorage","bind","loadFilesStateFromLocalStorage","loadFileBlobsFromServiceWorker","loadFileBlobsFromIndexedDB","onBlobsLoaded","savedState","load","log","setState","currentUploads","files","savedPluginData","pluginData","getWaitingFiles","waitingFiles","getFiles","forEach","file","progress","uploadStarted","getUploadingFiles","uploadingFiles","getState","uploadIDs","Object","keys","uploadID","filesInUpload","fileIDs","fileID","getFile","filesToSave","emit","data","save","list","then","blobs","numberOfFilesRecovered","length","numberOfFilesTryingToRecover","info","catch","err","obsoleteBlobs","updatedFiles","originalFile","push","cachedData","updatedFileData","isRestored","updatedFile","deleteBlobs","promises","delete","all","install","on","isRemote","put","successful","map","uploadId","restore"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../../core/Plugin')\r\nconst ServiceWorkerStore = require('./ServiceWorkerStore')\r\nconst IndexedDBStore = require('./IndexedDBStore')\r\nconst MetaDataStore = require('./MetaDataStore')\r\n\r\n/**\r\n* The GoldenRetriever plugin â€” restores selected files and resumes uploads\r\n* after a closed tab or a browser crash!\r\n*\r\n* Uses localStorage, IndexedDB and ServiceWorker to do its magic, read more:\r\n* https://uppy.io/blog/2017/07/golden-retriever/\r\n*/\r\nmodule.exports = class GoldenRetriever extends Plugin {\r\n  constructor (uppy, opts) {\r\n    super(uppy, opts)\r\n    this.type = 'debugger'\r\n    this.id = 'GoldenRetriever'\r\n    this.title = 'Golden Retriever'\r\n\r\n    const defaultOptions = {\r\n      expires: 24 * 60 * 60 * 1000, // 24 hours\r\n      serviceWorker: false\r\n    }\r\n\r\n    this.opts = Object.assign({}, defaultOptions, opts)\r\n\r\n    this.MetaDataStore = new MetaDataStore({\r\n      expires: this.opts.expires,\r\n      storeName: uppy.getID()\r\n    })\r\n    this.ServiceWorkerStore = null\r\n    if (this.opts.serviceWorker) {\r\n      this.ServiceWorkerStore = new ServiceWorkerStore({ storeName: uppy.getID() })\r\n    }\r\n    this.IndexedDBStore = new IndexedDBStore(Object.assign(\r\n      { expires: this.opts.expires },\r\n      opts.indexedDB || {},\r\n      { storeName: uppy.getID() }))\r\n\r\n    this.saveFilesStateToLocalStorage = this.saveFilesStateToLocalStorage.bind(this)\r\n    this.loadFilesStateFromLocalStorage = this.loadFilesStateFromLocalStorage.bind(this)\r\n    this.loadFileBlobsFromServiceWorker = this.loadFileBlobsFromServiceWorker.bind(this)\r\n    this.loadFileBlobsFromIndexedDB = this.loadFileBlobsFromIndexedDB.bind(this)\r\n    this.onBlobsLoaded = this.onBlobsLoaded.bind(this)\r\n  }\r\n\r\n  loadFilesStateFromLocalStorage () {\r\n    const savedState = this.MetaDataStore.load()\r\n\r\n    if (savedState) {\r\n      this.uppy.log('[GoldenRetriever] Recovered some state from Local Storage')\r\n      this.uppy.setState({\r\n        currentUploads: savedState.currentUploads || {},\r\n        files: savedState.files || {}\r\n      })\r\n\r\n      this.savedPluginData = savedState.pluginData\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get file objects that are currently waiting: they've been selected,\r\n   * but aren't yet being uploaded.\r\n   */\r\n  getWaitingFiles () {\r\n    const waitingFiles = {}\r\n\r\n    this.uppy.getFiles().forEach((file) => {\r\n      if (!file.progress || !file.progress.uploadStarted) {\r\n        waitingFiles[file.id] = file\r\n      }\r\n    })\r\n\r\n    return waitingFiles\r\n  }\r\n\r\n  /**\r\n   * Get file objects that are currently being uploaded. If a file has finished\r\n   * uploading, but the other files in the same batch have not, the finished\r\n   * file is also returned.\r\n   */\r\n  getUploadingFiles () {\r\n    const uploadingFiles = {}\r\n\r\n    const { currentUploads } = this.uppy.getState()\r\n    if (currentUploads) {\r\n      const uploadIDs = Object.keys(currentUploads)\r\n      uploadIDs.forEach((uploadID) => {\r\n        const filesInUpload = currentUploads[uploadID].fileIDs\r\n        filesInUpload.forEach((fileID) => {\r\n          uploadingFiles[fileID] = this.uppy.getFile(fileID)\r\n        })\r\n      })\r\n    }\r\n\r\n    return uploadingFiles\r\n  }\r\n\r\n  saveFilesStateToLocalStorage () {\r\n    const filesToSave = Object.assign(\r\n      this.getWaitingFiles(),\r\n      this.getUploadingFiles()\r\n    )\r\n\r\n    const pluginData = {}\r\n    // TODO Find a better way to do this?\r\n    // Other plugins can attach a restore:get-data listener that receives this callback.\r\n    // Plugins can then use this callback (sync) to provide data to be stored.\r\n    this.uppy.emit('restore:get-data', (data) => {\r\n      Object.assign(pluginData, data)\r\n    })\r\n\r\n    const { currentUploads } = this.uppy.getState()\r\n    this.MetaDataStore.save({\r\n      currentUploads: currentUploads,\r\n      files: filesToSave,\r\n      pluginData: pluginData\r\n    })\r\n  }\r\n\r\n  loadFileBlobsFromServiceWorker () {\r\n    this.ServiceWorkerStore.list().then((blobs) => {\r\n      const numberOfFilesRecovered = Object.keys(blobs).length\r\n      const numberOfFilesTryingToRecover = this.uppy.getFiles().length\r\n      if (numberOfFilesRecovered === numberOfFilesTryingToRecover) {\r\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from Service Worker!`)\r\n        this.uppy.info(`Successfully recovered ${numberOfFilesRecovered} files`, 'success', 3000)\r\n        return this.onBlobsLoaded(blobs)\r\n      }\r\n      this.uppy.log('[GoldenRetriever] No blobs found in Service Worker, trying IndexedDB now...')\r\n      return this.loadFileBlobsFromIndexedDB()\r\n    }).catch((err) => {\r\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from Service Worker', 'warning')\r\n      this.uppy.log(err)\r\n    })\r\n  }\r\n\r\n  loadFileBlobsFromIndexedDB () {\r\n    this.IndexedDBStore.list().then((blobs) => {\r\n      const numberOfFilesRecovered = Object.keys(blobs).length\r\n\r\n      if (numberOfFilesRecovered > 0) {\r\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from IndexedDB!`)\r\n        this.uppy.info(`Successfully recovered ${numberOfFilesRecovered} files`, 'success', 3000)\r\n        return this.onBlobsLoaded(blobs)\r\n      }\r\n      this.uppy.log('[GoldenRetriever] No blobs found in IndexedDB')\r\n    }).catch((err) => {\r\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from IndexedDB', 'warning')\r\n      this.uppy.log(err)\r\n    })\r\n  }\r\n\r\n  onBlobsLoaded (blobs) {\r\n    const obsoleteBlobs = []\r\n    const updatedFiles = Object.assign({}, this.uppy.getState().files)\r\n    Object.keys(blobs).forEach((fileID) => {\r\n      const originalFile = this.uppy.getFile(fileID)\r\n      if (!originalFile) {\r\n        obsoleteBlobs.push(fileID)\r\n        return\r\n      }\r\n\r\n      const cachedData = blobs[fileID]\r\n\r\n      const updatedFileData = {\r\n        data: cachedData,\r\n        isRestored: true\r\n      }\r\n      const updatedFile = Object.assign({}, originalFile, updatedFileData)\r\n      updatedFiles[fileID] = updatedFile\r\n    })\r\n\r\n    this.uppy.setState({\r\n      files: updatedFiles\r\n    })\r\n\r\n    this.uppy.emit('restored', this.savedPluginData)\r\n\r\n    if (obsoleteBlobs.length) {\r\n      this.deleteBlobs(obsoleteBlobs).then(() => {\r\n        this.uppy.log(`[GoldenRetriever] Cleaned up ${obsoleteBlobs.length} old files`)\r\n      }).catch((err) => {\r\n        this.uppy.log(`[GoldenRetriever] Could not clean up ${obsoleteBlobs.length} old files`, 'warning')\r\n        this.uppy.log(err)\r\n      })\r\n    }\r\n  }\r\n\r\n  deleteBlobs (fileIDs) {\r\n    const promises = []\r\n    fileIDs.forEach((id) => {\r\n      if (this.ServiceWorkerStore) {\r\n        promises.push(this.ServiceWorkerStore.delete(id))\r\n      }\r\n      if (this.IndexedDBStore) {\r\n        promises.push(this.IndexedDBStore.delete(id))\r\n      }\r\n    })\r\n    return Promise.all(promises)\r\n  }\r\n\r\n  install () {\r\n    this.loadFilesStateFromLocalStorage()\r\n\r\n    if (this.uppy.getFiles().length > 0) {\r\n      if (this.ServiceWorkerStore) {\r\n        this.uppy.log('[GoldenRetriever] Attempting to load files from Service Worker...')\r\n        this.loadFileBlobsFromServiceWorker()\r\n      } else {\r\n        this.uppy.log('[GoldenRetriever] Attempting to load files from Indexed DB...')\r\n        this.loadFileBlobsFromIndexedDB()\r\n      }\r\n    } else {\r\n      this.uppy.log('[GoldenRetriever] No files need to be loaded, only restoring processing state...')\r\n      this.onBlobsLoaded([])\r\n    }\r\n\r\n    this.uppy.on('file-added', (file) => {\r\n      if (file.isRemote) return\r\n\r\n      if (this.ServiceWorkerStore) {\r\n        this.ServiceWorkerStore.put(file).catch((err) => {\r\n          this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\r\n          this.uppy.log(err)\r\n        })\r\n      }\r\n\r\n      this.IndexedDBStore.put(file).catch((err) => {\r\n        this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\r\n        this.uppy.log(err)\r\n      })\r\n    })\r\n\r\n    this.uppy.on('file-removed', (file) => {\r\n      if (this.ServiceWorkerStore) {\r\n        this.ServiceWorkerStore.delete(file.id).catch((err) => {\r\n          this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\r\n          this.uppy.log(err)\r\n        })\r\n      }\r\n      this.IndexedDBStore.delete(file.id).catch((err) => {\r\n        this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\r\n        this.uppy.log(err)\r\n      })\r\n    })\r\n\r\n    this.uppy.on('complete', ({ successful }) => {\r\n      const fileIDs = successful.map((file) => file.id)\r\n      this.deleteBlobs(fileIDs).then(() => {\r\n        this.uppy.log(`[GoldenRetriever] Removed ${successful.length} files that finished uploading`)\r\n      }).catch((err) => {\r\n        this.uppy.log(`[GoldenRetriever] Could not remove ${successful.length} files that finished uploading`, 'warning')\r\n        this.uppy.log(err)\r\n      })\r\n    })\r\n\r\n    this.uppy.on('state-update', this.saveFilesStateToLocalStorage)\r\n\r\n    this.uppy.on('restored', () => {\r\n      // start all uploads again when file blobs are restored\r\n      const { currentUploads } = this.uppy.getState()\r\n      if (currentUploads) {\r\n        Object.keys(currentUploads).forEach((uploadId) => {\r\n          this.uppy.restore(uploadId, currentUploads[uploadId])\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n"]}