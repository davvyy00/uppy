{"version":3,"sources":["../../../src/plugins/Transloadit/index.test.js"],"names":["Core","require","Transloadit","describe","it","uppy","expect","use","params","toThrowError","not","autoProceed","getAssemblyOptions","file","name","toBe","data","Buffer","alloc","size","byteLength","addFile","upload","then","Error","err","message","toMatch","auth","key","steps","fake_step","tl","getPlugin","files","i","client","createAssembly","opts","toEqual","reject","assemblies","assembly","data2","alwaysRunAssembly","rejects","source","Uint8Array","fileID","Object","keys","getState","getFile","progress","uploadStarted","template_id"],"mappings":"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","file":"index.test.js","sourcesContent":["const Core = require('../../core')\r\nconst Transloadit = require('./')\r\n\r\ndescribe('Transloadit', () => {\r\n  it('Throws errors if options are missing', () => {\r\n    const uppy = new Core()\r\n\r\n    expect(() => {\r\n      uppy.use(Transloadit, { params: {} })\r\n    }).toThrowError(/The `params\\.auth\\.key` option is required/)\r\n  })\r\n\r\n  it('Accepts a JSON string as `params` for signature authentication', () => {\r\n    const uppy = new Core()\r\n\r\n    expect(() => {\r\n      uppy.use(Transloadit, {\r\n        params: 'not json'\r\n      })\r\n    }).toThrowError(/The `params` option is a malformed JSON string/)\r\n\r\n    expect(() => {\r\n      uppy.use(Transloadit, {\r\n        params: '{\"template_id\":\"some template id string\"}'\r\n      })\r\n    }).toThrowError(/The `params\\.auth\\.key` option is required/)\r\n    expect(() => {\r\n      uppy.use(Transloadit, {\r\n        params: '{\"auth\":{\"key\":\"some auth key string\"},\"template_id\":\"some template id string\"}'\r\n      })\r\n    }).not.toThrowError(/The `params\\.auth\\.key` option is required/)\r\n  })\r\n\r\n  it('Validates response from getAssemblyOptions()', () => {\r\n    const uppy = new Core({ autoProceed: false })\r\n\r\n    uppy.use(Transloadit, {\r\n      getAssemblyOptions: (file) => {\r\n        expect(file.name).toBe('testfile')\r\n        return {\r\n          params: '{\"some\":\"json\"}'\r\n        }\r\n      }\r\n    })\r\n\r\n    const data = Buffer.alloc(4000)\r\n    data.size = data.byteLength\r\n    uppy.addFile({\r\n      name: 'testfile',\r\n      data\r\n    })\r\n    return uppy.upload().then(() => {\r\n      throw new Error('should have rejected')\r\n    }, (err) => {\r\n      expect(err.message).toMatch(/The `params\\.auth\\.key` option is required/)\r\n    })\r\n  })\r\n\r\n  it('Uses different assemblies for different params', () => {\r\n    const uppy = new Core({ autoProceed: false })\r\n\r\n    uppy.use(Transloadit, {\r\n      getAssemblyOptions: (file) => ({\r\n        params: {\r\n          auth: { key: 'fake key' },\r\n          steps: {\r\n            fake_step: { data: file.name }\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    const tl = uppy.getPlugin('Transloadit')\r\n    const files = ['a.png', 'b.png', 'c.png', 'd.png']\r\n    let i = 0\r\n    tl.client.createAssembly = (opts) => {\r\n      expect(opts.params.steps.fake_step.data).toEqual(files[i])\r\n      i++\r\n      // Short-circuit upload\r\n      return Promise.reject('short-circuit') // eslint-disable-line prefer-promise-reject-errors\r\n    }\r\n\r\n    const data = Buffer.alloc(10)\r\n    data.size = data.byteLength\r\n\r\n    uppy.addFile({ name: 'a.png', data })\r\n    uppy.addFile({ name: 'b.png', data })\r\n    uppy.addFile({ name: 'c.png', data })\r\n    uppy.addFile({ name: 'd.png', data })\r\n\r\n    return uppy.upload().then(() => {\r\n      throw new Error('upload should have been rejected')\r\n    }, () => {\r\n      expect(i).toBe(4)\r\n    })\r\n  })\r\n\r\n  it('Should merge files with same parameters into one Assembly', () => {\r\n    const uppy = new Core({ autoProceed: false })\r\n\r\n    uppy.use(Transloadit, {\r\n      getAssemblyOptions: (file) => ({\r\n        params: {\r\n          auth: { key: 'fake key' },\r\n          steps: {\r\n            fake_step: { data: file.size }\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    const tl = uppy.getPlugin('Transloadit')\r\n    const assemblies = [\r\n      { data: 10, files: ['a.png', 'b.png', 'c.png'] },\r\n      { data: 20, files: ['d.png'] }\r\n    ]\r\n    let i = 0\r\n    tl.client.createAssembly = (opts) => {\r\n      const assembly = assemblies[i]\r\n      expect(opts.params.steps.fake_step.data).toBe(assembly.data)\r\n      i++\r\n      // Short-circuit upload\r\n      return Promise.reject('short-circuit') // eslint-disable-line prefer-promise-reject-errors\r\n    }\r\n\r\n    const data = Buffer.alloc(10)\r\n    data.size = data.byteLength\r\n    const data2 = Buffer.alloc(20)\r\n    data2.size = data2.byteLength\r\n\r\n    uppy.addFile({ name: 'a.png', data })\r\n    uppy.addFile({ name: 'b.png', data })\r\n    uppy.addFile({ name: 'c.png', data })\r\n    uppy.addFile({ name: 'd.png', data: data2 })\r\n\r\n    return uppy.upload().then(() => {\r\n      throw new Error('Upload should have been rejected')\r\n    }, () => {\r\n      expect(i).toBe(2)\r\n    })\r\n  })\r\n\r\n  it('Does not create an Assembly if no files are being uploaded', () => {\r\n    const uppy = new Core()\r\n    uppy.use(Transloadit, {\r\n      getAssemblyOptions () {\r\n        throw new Error('should not create Assembly')\r\n      }\r\n    })\r\n\r\n    return uppy.upload()\r\n  })\r\n\r\n  it('Creates an Assembly if no files are being uploaded but `alwaysRunAssembly` is enabled', () => {\r\n    const uppy = new Core()\r\n    uppy.use(Transloadit, {\r\n      alwaysRunAssembly: true,\r\n      getAssemblyOptions (file) {\r\n        // should call getAssemblyOptions with `null`\r\n        expect(file).toBe(null)\r\n        return Promise.reject('short-circuited') // eslint-disable-line prefer-promise-reject-errors\r\n      }\r\n    })\r\n\r\n    return expect(uppy.upload()).rejects.toEqual(new Error('short-circuited'))\r\n  })\r\n\r\n  it('Does not leave lingering progress if getAssemblyOptions fails', () => {\r\n    const uppy = new Core()\r\n    uppy.use(Transloadit, {\r\n      getAssemblyOptions (file) {\r\n        return Promise.reject(new Error('Failure!'))\r\n      }\r\n    })\r\n\r\n    uppy.addFile({\r\n      source: 'jest',\r\n      name: 'abc',\r\n      data: new Uint8Array(100)\r\n    })\r\n\r\n    return uppy.upload().then(() => {\r\n      throw new Error('Should not have succeeded')\r\n    }, (err) => {\r\n      const fileID = Object.keys(uppy.getState().files)[0]\r\n\r\n      expect(err.message).toBe('Failure!')\r\n      expect(uppy.getFile(fileID).progress.uploadStarted).toBe(false)\r\n    })\r\n  })\r\n\r\n  it('Does not leave lingering progress if creating assembly fails', () => {\r\n    const uppy = new Core()\r\n    uppy.use(Transloadit, {\r\n      params: {\r\n        auth: { key: 'some auth key string' },\r\n        template_id: 'some template id string'\r\n      }\r\n    })\r\n\r\n    uppy.getPlugin('Transloadit').client.createAssembly = () =>\r\n      Promise.reject(new Error('VIDEO_ENCODE_VALIDATION'))\r\n\r\n    uppy.addFile({\r\n      source: 'jest',\r\n      name: 'abc',\r\n      data: new Uint8Array(100)\r\n    })\r\n\r\n    return uppy.upload().then(() => {\r\n      throw new Error('Should not have succeeded')\r\n    }, (err) => {\r\n      const fileID = Object.keys(uppy.getState().files)[0]\r\n\r\n      expect(err.message).toBe('Transloadit: Could not create Assembly: VIDEO_ENCODE_VALIDATION')\r\n      expect(uppy.getFile(fileID).progress.uploadStarted).toBe(false)\r\n    })\r\n  })\r\n})\r\n"]}