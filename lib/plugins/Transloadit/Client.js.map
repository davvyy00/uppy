{"version":3,"sources":["../../../src/plugins/Transloadit/Client.js"],"names":["module","exports","opts","createAssembly","templateId","params","fields","signature","expectedFiles","data","FormData","append","JSON","stringify","Object","keys","forEach","key","fetch","service","method","body","then","response","json","assembly","error","Error","message","details","reason","reserveFile","file","size","encodeURIComponent","assembly_ssl_url","addFile","uploadURL","reject","url","filename","name","fieldname","qs","getAssemblyStatus"],"mappings":";;;;AAAA;;;AAGAA,OAAOC,OAAP;AACE,oBAAwB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AACtB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AAED;;;;;;;AALF,mBAUEC,cAVF,iCAgBK;AAAA,QALDC,UAKC,QALDA,UAKC;AAAA,QAJDC,MAIC,QAJDA,MAIC;AAAA,QAHDC,MAGC,QAHDA,MAGC;AAAA,QAFDC,SAEC,QAFDA,SAEC;AAAA,QADDC,aACC,QADDA,aACC;;AACD,QAAMC,OAAO,IAAIC,QAAJ,EAAb;AACAD,SAAKE,MAAL,CAAY,QAAZ,EAAsB,OAAON,MAAP,KAAkB,QAAlB,GAClBA,MADkB,GAElBO,KAAKC,SAAL,CAAeR,MAAf,CAFJ;AAGA,QAAIE,SAAJ,EAAe;AACbE,WAAKE,MAAL,CAAY,WAAZ,EAAyBJ,SAAzB;AACD;;AAEDO,WAAOC,IAAP,CAAYT,MAAZ,EAAoBU,OAApB,CAA4B,UAACC,GAAD,EAAS;AACnCR,WAAKE,MAAL,CAAYM,GAAZ,EAAiBX,OAAOW,GAAP,CAAjB;AACD,KAFD;AAGAR,SAAKE,MAAL,CAAY,2BAAZ,EAAyCH,aAAzC;;AAEA,WAAOU,MAAS,KAAKhB,IAAL,CAAUiB,OAAnB,kBAAyC;AAC9CC,cAAQ,MADsC;AAE9CC,YAAMZ;AAFwC,KAAzC,EAGJa,IAHI,CAGC,UAACC,QAAD;AAAA,aAAcA,SAASC,IAAT,EAAd;AAAA,KAHD,EAGgCF,IAHhC,CAGqC,UAACG,QAAD,EAAc;AACxD,UAAIA,SAASC,KAAb,EAAoB;AAClB,YAAMA,QAAQ,IAAIC,KAAJ,CAAUF,SAASC,KAAnB,CAAd;AACAA,cAAME,OAAN,GAAgBH,SAASC,KAAzB;AACAA,cAAMG,OAAN,GAAgBJ,SAASK,MAAzB;AACA,cAAMJ,KAAN;AACD;;AAED,aAAOD,QAAP;AACD,KAZM,CAAP;AAaD,GA3CH;;AAAA,mBA6CEM,WA7CF,wBA6CeN,QA7Cf,EA6CyBO,IA7CzB,EA6C+B;AAC3B,QAAMC,OAAOC,mBAAmBF,KAAKC,IAAxB,CAAb;AACA,WAAOf,MAASO,SAASU,gBAAlB,2BAAwDF,IAAxD,EAAgE,EAAEb,QAAQ,MAAV,EAAhE,EACJE,IADI,CACC,UAACC,QAAD;AAAA,aAAcA,SAASC,IAAT,EAAd;AAAA,KADD,CAAP;AAED,GAjDH;;AAAA,mBAmDEY,OAnDF,oBAmDWX,QAnDX,EAmDqBO,IAnDrB,EAmD2B;AACvB,QAAI,CAACA,KAAKK,SAAV,EAAqB;AACnB,aAAO,SAAQC,MAAR,CAAe,IAAIX,KAAJ,CAAU,oCAAV,CAAf,CAAP;AACD;AACD,QAAMM,OAAOC,mBAAmBF,KAAKC,IAAxB,CAAb;AACA,QAAMM,MAAML,mBAAmBF,KAAKK,SAAxB,CAAZ;AACA,QAAMG,WAAWN,mBAAmBF,KAAKS,IAAxB,CAAjB;AACA,QAAMC,YAAY,MAAlB;;AAEA,QAAMC,eAAaV,IAAb,kBAA8BO,QAA9B,mBAAoDE,SAApD,eAAuEH,GAA7E;AACA,WAAOrB,MAASO,SAASU,gBAAlB,kBAA+CQ,EAA/C,EAAqD,EAAEvB,QAAQ,MAAV,EAArD,EACJE,IADI,CACC,UAACC,QAAD;AAAA,aAAcA,SAASC,IAAT,EAAd;AAAA,KADD,CAAP;AAED,GA/DH;;AAiEE;;;;;;;AAjEF,mBAsEEoB,iBAtEF,8BAsEqBL,GAtErB,EAsE0B;AACtB,WAAOrB,MAAMqB,GAAN,EACJjB,IADI,CACC,UAACC,QAAD;AAAA,aAAcA,SAASC,IAAT,EAAd;AAAA,KADD,CAAP;AAED,GAzEH;;AAAA;AAAA","file":"Client.js","sourcesContent":["/**\r\n * A Barebones HTTP API client for Transloadit.\r\n */\r\nmodule.exports = class Client {\r\n  constructor (opts = {}) {\r\n    this.opts = opts\r\n  }\r\n\r\n  /**\r\n   * Create a new assembly.\r\n   *\r\n   * @param {object} options\r\n   */\r\n  createAssembly ({\r\n    templateId,\r\n    params,\r\n    fields,\r\n    signature,\r\n    expectedFiles\r\n  }) {\r\n    const data = new FormData()\r\n    data.append('params', typeof params === 'string'\r\n      ? params\r\n      : JSON.stringify(params))\r\n    if (signature) {\r\n      data.append('signature', signature)\r\n    }\r\n\r\n    Object.keys(fields).forEach((key) => {\r\n      data.append(key, fields[key])\r\n    })\r\n    data.append('num_expected_upload_files', expectedFiles)\r\n\r\n    return fetch(`${this.opts.service}/assemblies`, {\r\n      method: 'post',\r\n      body: data\r\n    }).then((response) => response.json()).then((assembly) => {\r\n      if (assembly.error) {\r\n        const error = new Error(assembly.error)\r\n        error.message = assembly.error\r\n        error.details = assembly.reason\r\n        throw error\r\n      }\r\n\r\n      return assembly\r\n    })\r\n  }\r\n\r\n  reserveFile (assembly, file) {\r\n    const size = encodeURIComponent(file.size)\r\n    return fetch(`${assembly.assembly_ssl_url}/reserve_file?size=${size}`, { method: 'post' })\r\n      .then((response) => response.json())\r\n  }\r\n\r\n  addFile (assembly, file) {\r\n    if (!file.uploadURL) {\r\n      return Promise.reject(new Error('File does not have an `uploadURL`.'))\r\n    }\r\n    const size = encodeURIComponent(file.size)\r\n    const url = encodeURIComponent(file.uploadURL)\r\n    const filename = encodeURIComponent(file.name)\r\n    const fieldname = 'file'\r\n\r\n    const qs = `size=${size}&filename=${filename}&fieldname=${fieldname}&s3Url=${url}`\r\n    return fetch(`${assembly.assembly_ssl_url}/add_file?${qs}`, { method: 'post' })\r\n      .then((response) => response.json())\r\n  }\r\n\r\n  /**\r\n   * Get the current status for an assembly.\r\n   *\r\n   * @param {string} url The status endpoint of the assembly.\r\n   */\r\n  getAssemblyStatus (url) {\r\n    return fetch(url)\r\n      .then((response) => response.json())\r\n  }\r\n}\r\n"]}