{"version":3,"sources":["../../../src/plugins/Transloadit/Socket.js"],"names":["io","require","Emitter","parseUrl","module","exports","url","assembly","emitter","on","bind","off","emit","parsed","socket","connect","origin","path","pathname","attachDefaultHandlers","id","assembly_id","close","file","stepName","result","err","Error","message","disconnect"],"mappings":";;;;AAAA,IAAMA,KAAKC,QAAQ,kBAAR,CAAX;AACA,IAAMC,UAAUD,QAAQ,mBAAR,CAAhB;AACA,IAAME,WAAWF,QAAQ,WAAR,CAAjB;;AAEA;;;AAGAG,OAAOC,OAAP;AACE,6BAAaC,GAAb,EAAkBC,QAAlB,EAA4B;AAAA;;AAC1B,QAAMC,UAAUN,SAAhB;AACA,SAAKO,EAAL,GAAUD,QAAQC,EAAR,CAAWC,IAAX,CAAgBF,OAAhB,CAAV;AACA,SAAKG,GAAL,GAAWH,QAAQG,GAAR,CAAYD,IAAZ,CAAiBF,OAAjB,CAAX;AACA,SAAKI,IAAL,GAAYJ,QAAQI,IAAR,CAAaF,IAAb,CAAkBF,OAAlB,CAAZ;;AAEA,QAAMK,SAASV,SAASG,GAAT,CAAf;;AAEA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKO,MAAL,GAAcd,GAAGe,OAAH,CAAWF,OAAOG,MAAlB,EAA0B;AACtCC,YAAMJ,OAAOK;AADyB,KAA1B,CAAd;;AAIA,SAAKC,qBAAL;AACD;;AAfH,8BAiBEA,qBAjBF,oCAiB2B;AAAA;;AACvB,SAAKL,MAAL,CAAYL,EAAZ,CAAe,SAAf,EAA0B,YAAM;AAC9B,YAAKK,MAAL,CAAYF,IAAZ,CAAiB,kBAAjB,EAAqC;AACnCQ,YAAI,MAAKb,QAAL,CAAcc;AADiB,OAArC;;AAIA,YAAKT,IAAL,CAAU,SAAV;AACD,KAND;;AAQA,SAAKE,MAAL,CAAYL,EAAZ,CAAe,mBAAf,EAAoC,YAAM;AACxC,YAAKG,IAAL,CAAU,UAAV;;AAEA,YAAKU,KAAL;AACD,KAJD;;AAMA,SAAKR,MAAL,CAAYL,EAAZ,CAAe,0BAAf,EAA2C,UAACc,IAAD,EAAU;AACnD,YAAKX,IAAL,CAAU,QAAV,EAAoBW,IAApB;AACD,KAFD;;AAIA,SAAKT,MAAL,CAAYL,EAAZ,CAAe,6BAAf,EAA8C,YAAM;AAClD,YAAKG,IAAL,CAAU,WAAV;AACD,KAFD;;AAIA,SAAKE,MAAL,CAAYL,EAAZ,CAAe,qCAAf,EAAsD,YAAM;AAC1D,YAAKG,IAAL,CAAU,UAAV;AACD,KAFD;;AAIA,SAAKE,MAAL,CAAYL,EAAZ,CAAe,0BAAf,EAA2C,UAACe,QAAD,EAAWC,MAAX,EAAsB;AAC/D,YAAKb,IAAL,CAAU,QAAV,EAAoBY,QAApB,EAA8BC,MAA9B;AACD,KAFD;;AAIA,SAAKX,MAAL,CAAYL,EAAZ,CAAe,gBAAf,EAAiC,UAACiB,GAAD,EAAS;AACxC,YAAKd,IAAL,CAAU,OAAV,EAAmB,SAAc,IAAIe,KAAJ,CAAUD,IAAIE,OAAd,CAAd,EAAsCF,GAAtC,CAAnB;AACD,KAFD;AAGD,GAnDH;;AAAA,8BAqDEJ,KArDF,oBAqDW;AACP,SAAKR,MAAL,CAAYe,UAAZ;AACD,GAvDH;;AAAA;AAAA","file":"Socket.js","sourcesContent":["const io = require('socket.io-client')\r\nconst Emitter = require('namespace-emitter')\r\nconst parseUrl = require('url-parse')\r\n\r\n/**\r\n * WebSocket status API client for Transloadit.\r\n */\r\nmodule.exports = class TransloaditSocket {\r\n  constructor (url, assembly) {\r\n    const emitter = Emitter()\r\n    this.on = emitter.on.bind(emitter)\r\n    this.off = emitter.off.bind(emitter)\r\n    this.emit = emitter.emit.bind(emitter)\r\n\r\n    const parsed = parseUrl(url)\r\n\r\n    this.assembly = assembly\r\n    this.socket = io.connect(parsed.origin, {\r\n      path: parsed.pathname\r\n    })\r\n\r\n    this.attachDefaultHandlers()\r\n  }\r\n\r\n  attachDefaultHandlers () {\r\n    this.socket.on('connect', () => {\r\n      this.socket.emit('assembly_connect', {\r\n        id: this.assembly.assembly_id\r\n      })\r\n\r\n      this.emit('connect')\r\n    })\r\n\r\n    this.socket.on('assembly_finished', () => {\r\n      this.emit('finished')\r\n\r\n      this.close()\r\n    })\r\n\r\n    this.socket.on('assembly_upload_finished', (file) => {\r\n      this.emit('upload', file)\r\n    })\r\n\r\n    this.socket.on('assembly_uploading_finished', () => {\r\n      this.emit('executing')\r\n    })\r\n\r\n    this.socket.on('assembly_upload_meta_data_extracted', () => {\r\n      this.emit('metadata')\r\n    })\r\n\r\n    this.socket.on('assembly_result_finished', (stepName, result) => {\r\n      this.emit('result', stepName, result)\r\n    })\r\n\r\n    this.socket.on('assembly_error', (err) => {\r\n      this.emit('error', Object.assign(new Error(err.message), err))\r\n    })\r\n  }\r\n\r\n  close () {\r\n    this.socket.disconnect()\r\n  }\r\n}\r\n"]}