{"version":3,"sources":["../../src/plugins/Informer.js"],"names":["Plugin","require","h","module","exports","uppy","opts","type","id","title","defaultOptions","typeColors","info","text","bg","warning","error","success","render","bind","state","isHidden","message","details","style","backgroundColor","color","install","target","mount"],"mappings":";;;;;;;;AAAA,IAAMA,SAASC,QAAQ,gBAAR,CAAf;;eACcA,QAAQ,QAAR,C;IAANC,C,YAAAA,C;;AAER;;;;;;;;;AAOAC,OAAOC,OAAP;AAAA;;AACE,oBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AAAA,iDACvB,mBAAMD,IAAN,EAAYC,IAAZ,CADuB;;AAEvB,UAAKC,IAAL,GAAY,mBAAZ;AACA,UAAKC,EAAL,GAAU,MAAKF,IAAL,CAAUE,EAAV,IAAgB,UAA1B;AACA,UAAKC,KAAL,GAAa,UAAb;;AAEA;AACA,QAAMC,iBAAiB;AACrBC,kBAAY;AACVC,cAAM;AACJC,gBAAM,MADF;AAEJC,cAAI;AAFA,SADI;AAKVC,iBAAS;AACPF,gBAAM,MADC;AAEPC,cAAI;AAFG,SALC;AASVE,eAAO;AACLH,gBAAM,MADD;AAELC,cAAI;AAFC,SATG;AAaVG,iBAAS;AACPJ,gBAAM,MADC;AAEPC,cAAI;AAFG;AAbC;;AAoBd;AArBuB,KAAvB,CAsBA,MAAKR,IAAL,GAAY,SAAc,EAAd,EAAkBI,cAAlB,EAAkCJ,IAAlC,CAAZ;;AAEA,UAAKY,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,OAAd;AA/BuB;AAgCxB;;AAjCH,qBAmCED,MAnCF,mBAmCUE,KAnCV,EAmCiB;AAAA,sBACgCA,MAAMR,IADtC;AAAA,QACLS,QADK,eACLA,QADK;AAAA,QACKd,IADL,eACKA,IADL;AAAA,QACWe,OADX,eACWA,OADX;AAAA,QACoBC,OADpB,eACoBA,OADpB;;AAEb,QAAMC,QAAQ;AACZC,uBAAiB,KAAKnB,IAAL,CAAUK,UAAV,CAAqBJ,IAArB,EAA2BO,EADhC;AAEZY,aAAO,KAAKpB,IAAL,CAAUK,UAAV,CAAqBJ,IAArB,EAA2BM;AAFtB,KAAd;;AAKA,WACE;AAAA;AAAA,QAAK,SAAM,oBAAX;AACE,eAAOW,KADT;AAEE,uBAAaH,QAFf;AAGE;AAAA;AAAA,UAAG,MAAK,OAAR;AACGC,eADH;AAEG,WAFH;AAGGC,mBAAW;AAAA;AAAA,YAAM,OAAO,EAAEG,OAAO,KAAKpB,IAAL,CAAUK,UAAV,CAAqBJ,IAArB,EAA2BO,EAApC,EAAb;AACV,0BAAYS,OADF;AAEV,sCAAuB,KAFb;AAGV,kCAAmB,OAHT;AAIV,kBAAK,SAJK;AAAA;AAAA;AAHd;AAHF,KADF;AAgBD,GA1DH;;AAAA,qBA4DEI,OA5DF,sBA4Da;AACT,QAAMC,SAAS,KAAKtB,IAAL,CAAUsB,MAAzB;AACA,QAAIA,MAAJ,EAAY;AACV,WAAKC,KAAL,CAAWD,MAAX,EAAmB,IAAnB;AACD;AACF,GAjEH;;AAAA;AAAA,EAAwC5B,MAAxC","file":"Informer.js","sourcesContent":["const Plugin = require('../core/Plugin')\r\nconst { h } = require('preact')\r\n\r\n/**\r\n * Informer\r\n * Shows rad message bubbles\r\n * used like this: `uppy.info('hello world', 'info', 5000)`\r\n * or for errors: `uppy.info('Error uploading img.jpg', 'error', 5000)`\r\n *\r\n */\r\nmodule.exports = class Informer extends Plugin {\r\n  constructor (uppy, opts) {\r\n    super(uppy, opts)\r\n    this.type = 'progressindicator'\r\n    this.id = this.opts.id || 'Informer'\r\n    this.title = 'Informer'\r\n\r\n    // set default options\r\n    const defaultOptions = {\r\n      typeColors: {\r\n        info: {\r\n          text: '#fff',\r\n          bg: '#000'\r\n        },\r\n        warning: {\r\n          text: '#fff',\r\n          bg: '#F6A623'\r\n        },\r\n        error: {\r\n          text: '#fff',\r\n          bg: '#D32F2F'\r\n        },\r\n        success: {\r\n          text: '#fff',\r\n          bg: '#1BB240'\r\n        }\r\n      }\r\n    }\r\n\r\n    // merge default options with the ones set by user\r\n    this.opts = Object.assign({}, defaultOptions, opts)\r\n\r\n    this.render = this.render.bind(this)\r\n  }\r\n\r\n  render (state) {\r\n    const { isHidden, type, message, details } = state.info\r\n    const style = {\r\n      backgroundColor: this.opts.typeColors[type].bg,\r\n      color: this.opts.typeColors[type].text\r\n    }\r\n\r\n    return (\r\n      <div class=\"uppy uppy-Informer\"\r\n        style={style}\r\n        aria-hidden={isHidden}>\r\n        <p role=\"alert\">\r\n          {message}\r\n          {' '}\r\n          {details && <span style={{ color: this.opts.typeColors[type].bg }}\r\n            aria-label={details}\r\n            data-microtip-position=\"top\"\r\n            data-microtip-size=\"large\"\r\n            role=\"tooltip\">?</span>\r\n          }\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  install () {\r\n    const target = this.opts.target\r\n    if (target) {\r\n      this.mount(target, this)\r\n    }\r\n  }\r\n}\r\n"]}