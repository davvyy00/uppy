{"version":3,"sources":["../../src/core/UppySocket.js"],"names":["ee","require","module","exports","opts","queued","isOpen","socket","WebSocket","target","emitter","onopen","e","length","first","send","action","payload","slice","onclose","_handleMessage","bind","onmessage","close","emit","on","once","push","JSON","stringify","handler","message","parse","data","err","console","log"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ,mBAAR,CAAX;;AAEAC,OAAOC,OAAP;AACE,sBAAaC,IAAb,EAAmB;AAAA;;AAAA;;AACjB,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKC,MAAL,GAAc,IAAIC,SAAJ,CAAcJ,KAAKK,MAAnB,CAAd;AACA,SAAKC,OAAL,GAAeV,IAAf;;AAEA,SAAKO,MAAL,CAAYI,MAAZ,GAAqB,UAACC,CAAD,EAAO;AAC1B,YAAKN,MAAL,GAAc,IAAd;;AAEA,aAAO,MAAKD,MAAL,CAAYQ,MAAZ,GAAqB,CAArB,IAA0B,MAAKP,MAAtC,EAA8C;AAC5C,YAAMQ,QAAQ,MAAKT,MAAL,CAAY,CAAZ,CAAd;AACA,cAAKU,IAAL,CAAUD,MAAME,MAAhB,EAAwBF,MAAMG,OAA9B;AACA,cAAKZ,MAAL,GAAc,MAAKA,MAAL,CAAYa,KAAZ,CAAkB,CAAlB,CAAd;AACD;AACF,KARD;;AAUA,SAAKX,MAAL,CAAYY,OAAZ,GAAsB,UAACP,CAAD,EAAO;AAC3B,YAAKN,MAAL,GAAc,KAAd;AACD,KAFD;;AAIA,SAAKc,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;;AAEA,SAAKd,MAAL,CAAYe,SAAZ,GAAwB,KAAKF,cAA7B;;AAEA,SAAKG,KAAL,GAAa,KAAKA,KAAL,CAAWF,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKG,IAAL,GAAY,KAAKA,IAAL,CAAUH,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKI,EAAL,GAAU,KAAKA,EAAL,CAAQJ,IAAR,CAAa,IAAb,CAAV;AACA,SAAKK,IAAL,GAAY,KAAKA,IAAL,CAAUL,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKN,IAAL,GAAY,KAAKA,IAAL,CAAUM,IAAV,CAAe,IAAf,CAAZ;AACD;;AA9BH,uBAgCEE,KAhCF,oBAgCW;AACP,WAAO,KAAKhB,MAAL,CAAYgB,KAAZ,EAAP;AACD,GAlCH;;AAAA,uBAoCER,IApCF,iBAoCQC,MApCR,EAoCgBC,OApChB,EAoCyB;AACrB;;AAEA,QAAI,CAAC,KAAKX,MAAV,EAAkB;AAChB,WAAKD,MAAL,CAAYsB,IAAZ,CAAiB,EAACX,cAAD,EAASC,gBAAT,EAAjB;AACA;AACD;;AAED,SAAKV,MAAL,CAAYQ,IAAZ,CAAiBa,KAAKC,SAAL,CAAe;AAC9Bb,oBAD8B;AAE9BC;AAF8B,KAAf,CAAjB;AAID,GAhDH;;AAAA,uBAkDEQ,EAlDF,eAkDMT,MAlDN,EAkDcc,OAlDd,EAkDuB;AACnB,SAAKpB,OAAL,CAAae,EAAb,CAAgBT,MAAhB,EAAwBc,OAAxB;AACD,GApDH;;AAAA,uBAsDEN,IAtDF,iBAsDQR,MAtDR,EAsDgBC,OAtDhB,EAsDyB;AACrB,SAAKP,OAAL,CAAac,IAAb,CAAkBR,MAAlB,EAA0BC,OAA1B;AACD,GAxDH;;AAAA,uBA0DES,IA1DF,iBA0DQV,MA1DR,EA0DgBc,OA1DhB,EA0DyB;AACrB,SAAKpB,OAAL,CAAagB,IAAb,CAAkBV,MAAlB,EAA0Bc,OAA1B;AACD,GA5DH;;AAAA,uBA8DEV,cA9DF,2BA8DkBR,CA9DlB,EA8DqB;AACjB,QAAI;AACF,UAAMmB,UAAUH,KAAKI,KAAL,CAAWpB,EAAEqB,IAAb,CAAhB;AACA,WAAKT,IAAL,CAAUO,QAAQf,MAAlB,EAA0Be,QAAQd,OAAlC;AACD,KAHD,CAGE,OAAOiB,GAAP,EAAY;AACZC,cAAQC,GAAR,CAAYF,GAAZ;AACD;AACF,GArEH;;AAAA;AAAA","file":"UppySocket.js","sourcesContent":["const ee = require('namespace-emitter')\r\n\r\nmodule.exports = class UppySocket {\r\n  constructor (opts) {\r\n    this.queued = []\r\n    this.isOpen = false\r\n    this.socket = new WebSocket(opts.target)\r\n    this.emitter = ee()\r\n\r\n    this.socket.onopen = (e) => {\r\n      this.isOpen = true\r\n\r\n      while (this.queued.length > 0 && this.isOpen) {\r\n        const first = this.queued[0]\r\n        this.send(first.action, first.payload)\r\n        this.queued = this.queued.slice(1)\r\n      }\r\n    }\r\n\r\n    this.socket.onclose = (e) => {\r\n      this.isOpen = false\r\n    }\r\n\r\n    this._handleMessage = this._handleMessage.bind(this)\r\n\r\n    this.socket.onmessage = this._handleMessage\r\n\r\n    this.close = this.close.bind(this)\r\n    this.emit = this.emit.bind(this)\r\n    this.on = this.on.bind(this)\r\n    this.once = this.once.bind(this)\r\n    this.send = this.send.bind(this)\r\n  }\r\n\r\n  close () {\r\n    return this.socket.close()\r\n  }\r\n\r\n  send (action, payload) {\r\n    // attach uuid\r\n\r\n    if (!this.isOpen) {\r\n      this.queued.push({action, payload})\r\n      return\r\n    }\r\n\r\n    this.socket.send(JSON.stringify({\r\n      action,\r\n      payload\r\n    }))\r\n  }\r\n\r\n  on (action, handler) {\r\n    this.emitter.on(action, handler)\r\n  }\r\n\r\n  emit (action, payload) {\r\n    this.emitter.emit(action, payload)\r\n  }\r\n\r\n  once (action, handler) {\r\n    this.emitter.once(action, handler)\r\n  }\r\n\r\n  _handleMessage (e) {\r\n    try {\r\n      const message = JSON.parse(e.data)\r\n      this.emit(message.action, message.payload)\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n}\r\n"]}