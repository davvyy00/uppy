{"version":3,"sources":["../../src/core/Core.js"],"names":["Translator","require","ee","cuid","prettyBytes","match","DefaultStore","getFileType","getFileNameAndExtension","generateFileID","isObjectURL","getTimeStamp","Uppy","opts","defaultLocale","strings","youCanOnlyUploadX","youHaveToAtLeastSelectX","exceedsSize","youCanOnlyUploadFileTypes","uppyServerError","failedToUpload","noInternetConnection","connectedToInternet","noFilesFound","selectXFiles","cancel","logOut","defaultOptions","id","autoProceed","debug","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","meta","onBeforeFileAdded","currentFile","files","onBeforeUpload","locale","store","translator","i18n","translate","bind","plugins","getState","getPlugin","setFileMeta","setFileState","log","info","hideInfo","addFile","emitDeleteFileEvent","removeFile","pauseResume","_calculateProgress","updateOnlineStatus","resetProgress","pauseAll","resumeAll","retryAll","cancelAll","retryUpload","upload","emitter","on","off","once","emit","preProcessors","uploaders","postProcessors","setState","currentUploads","capabilities","resumableUploads","totalProgress","isHidden","type","message","_storeUnsubscribe","subscribe","prevState","nextState","patch","updateAll","window","_addListeners","event","callback","state","iteratePlugins","plugin","update","fileID","defaultProgress","percentage","bytesUploaded","uploadComplete","uploadStarted","updatedFiles","Object","keys","forEach","updatedFile","progress","addPreProcessor","fn","push","removePreProcessor","i","indexOf","splice","addPostProcessor","removePostProcessor","addUploader","removeUploader","setMeta","data","updatedMeta","newMeta","getFile","getFiles","map","_checkMinNumberOfFiles","length","Error","smart_count","_checkRestrictions","file","isCorrectFileType","filter","extension","substr","allowedFileTypesString","join","size","onError","msg","err","onBeforeFileAddedResult","then","TypeError","fileType","fileName","name","split","fileExtension","isRemote","newFile","source","bytesTotal","remote","preview","scheduledAutoProceed","setTimeout","catch","console","error","stack","removedFile","updatedUploads","removeUploads","uploadID","newFileIDs","fileIDs","uploadFileID","_removeUpload","_calculateTotalProgress","URL","revokeObjectURL","wasPaused","isPaused","inProgressUpdatedFiles","filesToRetry","_createUpload","_runUpload","uploadIDs","reset","Math","floor","toFixed","inProgress","progressMax","progressAll","isNaN","details","Date","now","uploadResp","uploadURL","currentProgress","preprocess","postprocess","addEventListener","online","navigator","onLine","wasOffline","getID","use","Plugin","pluginId","existsPluginAlready","install","foundPlugin","pluginName","method","pluginType","removePlugin","instance","uninstall","list","slice","index","updatedState","close","duration","isComplexMessage","clearTimeout","infoTimeoutID","undefined","newInfo","warn","dir","run","restore","reject","step","result","_getUpload","addResultData","currentUpload","uploadData","restoreStep","steps","lastStep","resolve","successful","failed","uploader","onBeforeUploadResult","currentlyUploadingFiles","reduce","prev","curr","concat","waitingFileIDs","module","exports"],"mappings":"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","file":"Core.js","sourcesContent":["const Translator = require('../core/Translator')\r\nconst ee = require('namespace-emitter')\r\nconst cuid = require('cuid')\r\n// const throttle = require('lodash.throttle')\r\nconst prettyBytes = require('prettier-bytes')\r\nconst match = require('mime-match')\r\nconst DefaultStore = require('../store/DefaultStore')\r\nconst getFileType = require('../utils/getFileType')\r\nconst getFileNameAndExtension = require('../utils/getFileNameAndExtension')\r\nconst generateFileID = require('../utils/generateFileID')\r\nconst isObjectURL = require('../utils/isObjectURL')\r\nconst getTimeStamp = require('../utils/getTimeStamp')\r\n\r\n/**\r\n * Uppy Core module.\r\n * Manages plugins, state updates, acts as an event bus,\r\n * adds/removes files and metadata.\r\n */\r\nclass Uppy {\r\n  /**\r\n  * Instantiate Uppy\r\n  * @param {object} opts — Uppy options\r\n  */\r\n  constructor (opts) {\r\n    const defaultLocale = {\r\n      strings: {\r\n        youCanOnlyUploadX: {\r\n          0: 'You can only upload %{smart_count} file',\r\n          1: 'You can only upload %{smart_count} files'\r\n        },\r\n        youHaveToAtLeastSelectX: {\r\n          0: 'You have to select at least %{smart_count} file',\r\n          1: 'You have to select at least %{smart_count} files'\r\n        },\r\n        exceedsSize: 'This file exceeds maximum allowed size of',\r\n        youCanOnlyUploadFileTypes: 'You can only upload:',\r\n        uppyServerError: 'Connection with Uppy Server failed',\r\n        failedToUpload: 'Failed to upload %{file}',\r\n        noInternetConnection: 'No Internet connection',\r\n        connectedToInternet: 'Connected to the Internet',\r\n        // Strings for remote providers\r\n        noFilesFound: 'You have no files or folders here',\r\n        selectXFiles: {\r\n          0: 'Select %{smart_count} file',\r\n          1: 'Select %{smart_count} files'\r\n        },\r\n        cancel: 'Cancel',\r\n        logOut: 'Log out'\r\n      }\r\n    }\r\n\r\n    // set default options\r\n    const defaultOptions = {\r\n      id: 'uppy',\r\n      autoProceed: true,\r\n      debug: false,\r\n      restrictions: {\r\n        maxFileSize: null,\r\n        maxNumberOfFiles: null,\r\n        minNumberOfFiles: null,\r\n        allowedFileTypes: null\r\n      },\r\n      meta: {},\r\n      onBeforeFileAdded: (currentFile, files) => currentFile,\r\n      onBeforeUpload: (files) => files,\r\n      locale: defaultLocale,\r\n      store: DefaultStore()\r\n    }\r\n\r\n    // Merge default options with the ones set by user\r\n    this.opts = Object.assign({}, defaultOptions, opts)\r\n    this.opts.restrictions = Object.assign({}, defaultOptions.restrictions, this.opts.restrictions)\r\n\r\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\r\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\r\n\r\n    // i18n\r\n    this.translator = new Translator({locale: this.locale})\r\n    this.i18n = this.translator.translate.bind(this.translator)\r\n\r\n    // Container for different types of plugins\r\n    this.plugins = {}\r\n\r\n    this.getState = this.getState.bind(this)\r\n    this.getPlugin = this.getPlugin.bind(this)\r\n    this.setFileMeta = this.setFileMeta.bind(this)\r\n    this.setFileState = this.setFileState.bind(this)\r\n    this.log = this.log.bind(this)\r\n    this.info = this.info.bind(this)\r\n    this.hideInfo = this.hideInfo.bind(this)\r\n    this.addFile = this.addFile.bind(this)\r\n    this.emitDeleteFileEvent = this.emitDeleteFileEvent.bind(this)\r\n    this.removeFile = this.removeFile.bind(this)\r\n    this.pauseResume = this.pauseResume.bind(this)\r\n    this._calculateProgress = this._calculateProgress.bind(this)\r\n    this.updateOnlineStatus = this.updateOnlineStatus.bind(this)\r\n    this.resetProgress = this.resetProgress.bind(this)\r\n\r\n    this.pauseAll = this.pauseAll.bind(this)\r\n    this.resumeAll = this.resumeAll.bind(this)\r\n    this.retryAll = this.retryAll.bind(this)\r\n    this.cancelAll = this.cancelAll.bind(this)\r\n    this.retryUpload = this.retryUpload.bind(this)\r\n    this.upload = this.upload.bind(this)\r\n\r\n    this.emitter = ee()\r\n    this.on = this.on.bind(this)\r\n    this.off = this.off.bind(this)\r\n    this.once = this.emitter.once.bind(this.emitter)\r\n    this.emit = this.emitter.emit.bind(this.emitter)\r\n\r\n    this.preProcessors = []\r\n    this.uploaders = []\r\n    this.postProcessors = []\r\n\r\n    this.store = this.opts.store\r\n    this.setState({\r\n      plugins: {},\r\n      files: {},\r\n      currentUploads: {},\r\n      capabilities: {\r\n        resumableUploads: false\r\n      },\r\n      totalProgress: 0,\r\n      meta: Object.assign({}, this.opts.meta),\r\n      info: {\r\n        isHidden: true,\r\n        type: 'info',\r\n        message: ''\r\n      }\r\n    })\r\n\r\n    this._storeUnsubscribe = this.store.subscribe((prevState, nextState, patch) => {\r\n      this.emit('state-update', prevState, nextState, patch)\r\n      this.updateAll(nextState)\r\n    })\r\n\r\n    // for debugging and testing\r\n    // this.updateNum = 0\r\n    if (this.opts.debug && typeof window !== 'undefined') {\r\n      window['uppyLog'] = ''\r\n      window[this.opts.id] = this\r\n    }\r\n\r\n    this._addListeners()\r\n  }\r\n\r\n  on (event, callback) {\r\n    this.emitter.on(event, callback)\r\n    return this\r\n  }\r\n\r\n  off (event, callback) {\r\n    this.emitter.off(event, callback)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Iterate on all plugins and run `update` on them.\r\n   * Called each time state changes.\r\n   *\r\n   */\r\n  updateAll (state) {\r\n    this.iteratePlugins(plugin => {\r\n      plugin.update(state)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Updates state with a patch\r\n   *\r\n   * @param {object} patch {foo: 'bar'}\r\n   */\r\n  setState (patch) {\r\n    this.store.setState(patch)\r\n  }\r\n\r\n  /**\r\n   * Returns current state.\r\n   * @return {object}\r\n   */\r\n  getState () {\r\n    return this.store.getState()\r\n  }\r\n\r\n  /**\r\n  * Back compat for when uppy.state is used instead of uppy.getState().\r\n  */\r\n  get state () {\r\n    return this.getState()\r\n  }\r\n\r\n  /**\r\n  * Shorthand to set state for a specific file.\r\n  */\r\n  setFileState (fileID, state) {\r\n    /*\r\n    START\r\n    we need to take this out because we state for already update photos\r\n    if (!this.getState().files[fileID]) {\r\n      throw new Error(`Can’t set state for ${fileID} (the file could have been removed)`)\r\n    }\r\n    FINISH\r\n    */\r\n    this.setState({\r\n      files: Object.assign({}, this.getState().files, {\r\n        [fileID]: Object.assign({}, this.getState().files[fileID], state)\r\n      })\r\n    })\r\n  }\r\n\r\n  resetProgress () {\r\n    const defaultProgress = {\r\n      percentage: 0,\r\n      bytesUploaded: 0,\r\n      uploadComplete: false,\r\n      uploadStarted: false\r\n    }\r\n    const files = Object.assign({}, this.getState().files)\r\n    const updatedFiles = {}\r\n    Object.keys(files).forEach(fileID => {\r\n      const updatedFile = Object.assign({}, files[fileID])\r\n      updatedFile.progress = Object.assign({}, updatedFile.progress, defaultProgress)\r\n      updatedFiles[fileID] = updatedFile\r\n    })\r\n\r\n    this.setState({\r\n      files: updatedFiles,\r\n      totalProgress: 0\r\n    })\r\n\r\n    // TODO Document on the website\r\n    this.emit('reset-progress')\r\n  }\r\n\r\n  addPreProcessor (fn) {\r\n    this.preProcessors.push(fn)\r\n  }\r\n\r\n  removePreProcessor (fn) {\r\n    const i = this.preProcessors.indexOf(fn)\r\n    if (i !== -1) {\r\n      this.preProcessors.splice(i, 1)\r\n    }\r\n  }\r\n\r\n  addPostProcessor (fn) {\r\n    this.postProcessors.push(fn)\r\n  }\r\n\r\n  removePostProcessor (fn) {\r\n    const i = this.postProcessors.indexOf(fn)\r\n    if (i !== -1) {\r\n      this.postProcessors.splice(i, 1)\r\n    }\r\n  }\r\n\r\n  addUploader (fn) {\r\n    this.uploaders.push(fn)\r\n  }\r\n\r\n  removeUploader (fn) {\r\n    const i = this.uploaders.indexOf(fn)\r\n    if (i !== -1) {\r\n      this.uploaders.splice(i, 1)\r\n    }\r\n  }\r\n\r\n  setMeta (data) {\r\n    const updatedMeta = Object.assign({}, this.getState().meta, data)\r\n    const updatedFiles = Object.assign({}, this.getState().files)\r\n\r\n    Object.keys(updatedFiles).forEach((fileID) => {\r\n      updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {\r\n        meta: Object.assign({}, updatedFiles[fileID].meta, data)\r\n      })\r\n    })\r\n\r\n    this.log('Adding metadata:')\r\n    this.log(data)\r\n\r\n    this.setState({\r\n      meta: updatedMeta,\r\n      files: updatedFiles\r\n    })\r\n  }\r\n\r\n  setFileMeta (fileID, data) {\r\n    const updatedFiles = Object.assign({}, this.getState().files)\r\n    if (!updatedFiles[fileID]) {\r\n      this.log('Was trying to set metadata for a file that’s not with us anymore: ', fileID)\r\n      return\r\n    }\r\n    const newMeta = Object.assign({}, updatedFiles[fileID].meta, data)\r\n    updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {\r\n      meta: newMeta\r\n    })\r\n    this.setState({files: updatedFiles})\r\n  }\r\n\r\n  /**\r\n   * Get a file object.\r\n   *\r\n   * @param {string} fileID The ID of the file object to return.\r\n   */\r\n  getFile (fileID) {\r\n    return this.getState().files[fileID]\r\n  }\r\n\r\n  /**\r\n   * Get all files in an array.\r\n   */\r\n  getFiles () {\r\n    const { files } = this.getState()\r\n    return Object.keys(files).map((fileID) => files[fileID])\r\n  }\r\n\r\n  /**\r\n  * Check if minNumberOfFiles restriction is reached before uploading.\r\n  *\r\n  * @private\r\n  */\r\n  _checkMinNumberOfFiles (files) {\r\n    const {minNumberOfFiles} = this.opts.restrictions\r\n    if (Object.keys(files).length < minNumberOfFiles) {\r\n      throw new Error(`${this.i18n('youHaveToAtLeastSelectX', { smart_count: minNumberOfFiles })}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Check if file passes a set of restrictions set in options: maxFileSize,\r\n  * maxNumberOfFiles and allowedFileTypes.\r\n  *\r\n  * @param {object} file object to check\r\n  * @private\r\n  */\r\n  _checkRestrictions (file) {\r\n    const {maxFileSize, maxNumberOfFiles, allowedFileTypes} = this.opts.restrictions\r\n\r\n    if (maxNumberOfFiles) {\r\n      if (Object.keys(this.getState().files).length + 1 > maxNumberOfFiles) {\r\n        throw new Error(`${this.i18n('youCanOnlyUploadX', { smart_count: maxNumberOfFiles })}`)\r\n      }\r\n    }\r\n\r\n    if (allowedFileTypes) {\r\n      const isCorrectFileType = allowedFileTypes.filter((type) => {\r\n        // if (!file.type) return false\r\n\r\n        // is this is a mime-type\r\n        if (type.indexOf('/') > -1) {\r\n          if (!file.type) return false\r\n          return match(file.type, type)\r\n        }\r\n\r\n        // otherwise this is likely an extension\r\n        if (type[0] === '.') {\r\n          if (file.extension === type.substr(1)) {\r\n            return file.extension\r\n          }\r\n        }\r\n      }).length > 0\r\n\r\n      if (!isCorrectFileType) {\r\n        const allowedFileTypesString = allowedFileTypes.join(', ')\r\n        throw new Error(`${this.i18n('youCanOnlyUploadFileTypes')} ${allowedFileTypesString}`)\r\n      }\r\n    }\r\n\r\n    if (maxFileSize) {\r\n      if (file.data.size > maxFileSize) {\r\n        throw new Error(`${this.i18n('exceedsSize')} ${prettyBytes(maxFileSize)}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\r\n  * try to guess file type in a clever way, check file against restrictions,\r\n  * and start an upload if `autoProceed === true`.\r\n  *\r\n  * @param {object} file object to add\r\n  */\r\n  addFile (file) {\r\n    const { files } = this.getState()\r\n\r\n    const onError = (msg) => {\r\n      const err = typeof msg === 'object' ? msg : new Error(msg)\r\n      this.log(err.message)\r\n      this.info(err.message, 'error', 5000)\r\n      throw err\r\n    }\r\n\r\n    const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(file, files)\r\n\r\n    if (onBeforeFileAddedResult === false) {\r\n      this.log('Not adding file because onBeforeFileAdded returned false')\r\n      return\r\n    }\r\n\r\n    if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult) {\r\n      // warning after the change in 0.24\r\n      if (onBeforeFileAddedResult.then) {\r\n        throw new TypeError('onBeforeFileAdded() returned a Promise, but this is no longer supported. It must be synchronous.')\r\n      }\r\n      file = onBeforeFileAddedResult\r\n    }\r\n\r\n    const fileType = getFileType(file)\r\n    let fileName\r\n    if (file.name) {\r\n      fileName = file.name\r\n    } else if (fileType.split('/')[0] === 'image') {\r\n      fileName = fileType.split('/')[0] + '.' + fileType.split('/')[1]\r\n    } else {\r\n      fileName = 'noname'\r\n    }\r\n    const fileExtension = getFileNameAndExtension(fileName).extension\r\n    const isRemote = file.isRemote || false\r\n\r\n    const fileID = generateFileID(file)\r\n\r\n    const meta = file.meta || {}\r\n    meta.name = fileName\r\n    meta.type = fileType\r\n\r\n    const newFile = {\r\n      source: file.source || '',\r\n      id: fileID,\r\n      name: fileName,\r\n      extension: fileExtension || '',\r\n      meta: Object.assign({}, this.getState().meta, meta),\r\n      type: fileType,\r\n      data: file.data,\r\n      progress: {\r\n        percentage: 0,\r\n        bytesUploaded: 0,\r\n        bytesTotal: file.data.size || 0,\r\n        uploadComplete: false,\r\n        uploadStarted: false\r\n      },\r\n      size: file.data.size || 0,\r\n      isRemote: isRemote,\r\n      remote: file.remote || '',\r\n      preview: file.preview\r\n    }\r\n\r\n    try {\r\n      this._checkRestrictions(newFile)\r\n    } catch (err) {\r\n      onError(err)\r\n    }\r\n\r\n    this.setState({\r\n      files: Object.assign({}, files, {\r\n        [fileID]: newFile\r\n      })\r\n    })\r\n\r\n    this.emit('file-added', newFile)\r\n    this.log(`Added file: ${fileName}, ${fileID}, mime type: ${fileType}`)\r\n\r\n    if (this.opts.autoProceed && !this.scheduledAutoProceed) {\r\n      this.scheduledAutoProceed = setTimeout(() => {\r\n        this.scheduledAutoProceed = null\r\n        this.upload().catch((err) => {\r\n          console.error(err.stack || err.message || err)\r\n        })\r\n      }, 4)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * START\r\n   * @param file\r\n   * @returns {function()} Emit an event to uppy with the id of the file to be deleted\r\n   * FINISH\r\n   */\r\n  emitDeleteFileEvent (file) {\r\n    return () => {\r\n      this.emit('file-deleted', file.id)\r\n      this.log(`File deleted: ${file.id}`)\r\n    }\r\n  }\r\n\r\n  removeFile (fileID) {\r\n    const { files, currentUploads } = this.getState()\r\n    const updatedFiles = Object.assign({}, files)\r\n    const removedFile = updatedFiles[fileID]\r\n    delete updatedFiles[fileID]\r\n\r\n    // Remove this file from its `currentUpload`.\r\n    const updatedUploads = Object.assign({}, currentUploads)\r\n    const removeUploads = []\r\n    Object.keys(updatedUploads).forEach((uploadID) => {\r\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter((uploadFileID) => uploadFileID !== fileID)\r\n      // Remove the upload if no files are associated with it anymore.\r\n      if (newFileIDs.length === 0) {\r\n        removeUploads.push(uploadID)\r\n        return\r\n      }\r\n\r\n      updatedUploads[uploadID] = Object.assign({}, currentUploads[uploadID], {\r\n        fileIDs: newFileIDs\r\n      })\r\n    })\r\n\r\n    this.setState({\r\n      currentUploads: updatedUploads,\r\n      files: updatedFiles\r\n    })\r\n\r\n    removeUploads.forEach((uploadID) => {\r\n      this._removeUpload(uploadID)\r\n    })\r\n\r\n    this._calculateTotalProgress()\r\n    this.emit('file-removed', removedFile)\r\n    this.log(`File removed: ${removedFile.id}`)\r\n\r\n    // Clean up object URLs.\r\n    if (removedFile.preview && isObjectURL(removedFile.preview)) {\r\n      URL.revokeObjectURL(removedFile.preview)\r\n    }\r\n\r\n    this.log(`Removed file: ${fileID}`)\r\n  }\r\n\r\n  pauseResume (fileID) {\r\n    if (this.getFile(fileID).uploadComplete) return\r\n\r\n    const wasPaused = this.getFile(fileID).isPaused || false\r\n    const isPaused = !wasPaused\r\n\r\n    this.setFileState(fileID, {\r\n      isPaused: isPaused\r\n    })\r\n\r\n    this.emit('upload-pause', fileID, isPaused)\r\n\r\n    return isPaused\r\n  }\r\n\r\n  pauseAll () {\r\n    const updatedFiles = Object.assign({}, this.getState().files)\r\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\r\n      return !updatedFiles[file].progress.uploadComplete &&\r\n             updatedFiles[file].progress.uploadStarted\r\n    })\r\n\r\n    inProgressUpdatedFiles.forEach((file) => {\r\n      const updatedFile = Object.assign({}, updatedFiles[file], {\r\n        isPaused: true\r\n      })\r\n      updatedFiles[file] = updatedFile\r\n    })\r\n    this.setState({files: updatedFiles})\r\n\r\n    this.emit('pause-all')\r\n  }\r\n\r\n  resumeAll () {\r\n    const updatedFiles = Object.assign({}, this.getState().files)\r\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\r\n      return !updatedFiles[file].progress.uploadComplete &&\r\n             updatedFiles[file].progress.uploadStarted\r\n    })\r\n\r\n    inProgressUpdatedFiles.forEach((file) => {\r\n      const updatedFile = Object.assign({}, updatedFiles[file], {\r\n        isPaused: false,\r\n        error: null\r\n      })\r\n      updatedFiles[file] = updatedFile\r\n    })\r\n    this.setState({files: updatedFiles})\r\n\r\n    this.emit('resume-all')\r\n  }\r\n\r\n  retryAll () {\r\n    const updatedFiles = Object.assign({}, this.getState().files)\r\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\r\n      return updatedFiles[file].error\r\n    })\r\n\r\n    filesToRetry.forEach((file) => {\r\n      const updatedFile = Object.assign({}, updatedFiles[file], {\r\n        isPaused: false,\r\n        error: null\r\n      })\r\n      updatedFiles[file] = updatedFile\r\n    })\r\n    this.setState({\r\n      files: updatedFiles,\r\n      error: null\r\n    })\r\n\r\n    this.emit('retry-all', filesToRetry)\r\n\r\n    const uploadID = this._createUpload(filesToRetry)\r\n    return this._runUpload(uploadID)\r\n  }\r\n\r\n  cancelAll () {\r\n    this.emit('cancel-all')\r\n\r\n    // TODO Or should we just call removeFile on all files?\r\n    const { currentUploads } = this.getState()\r\n    const uploadIDs = Object.keys(currentUploads)\r\n\r\n    uploadIDs.forEach((id) => {\r\n      this._removeUpload(id)\r\n    })\r\n\r\n    this.setState({\r\n      files: {},\r\n      totalProgress: 0,\r\n      error: null\r\n    })\r\n  }\r\n\r\n  retryUpload (fileID) {\r\n    const updatedFiles = Object.assign({}, this.getState().files)\r\n    const updatedFile = Object.assign({}, updatedFiles[fileID],\r\n      { error: null, isPaused: false }\r\n    )\r\n    updatedFiles[fileID] = updatedFile\r\n    this.setState({\r\n      files: updatedFiles\r\n    })\r\n\r\n    this.emit('upload-retry', fileID)\r\n\r\n    const uploadID = this._createUpload([ fileID ])\r\n    return this._runUpload(uploadID)\r\n  }\r\n\r\n  reset () {\r\n    this.cancelAll()\r\n  }\r\n\r\n  _calculateProgress (file, data) {\r\n    if (!this.getFile(file.id)) {\r\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`)\r\n      return\r\n    }\r\n\r\n    this.setFileState(file.id, {\r\n      progress: Object.assign({}, this.getFile(file.id).progress, {\r\n        bytesUploaded: data.bytesUploaded,\r\n        bytesTotal: data.bytesTotal,\r\n        percentage: Math.floor((data.bytesUploaded / data.bytesTotal * 100).toFixed(2))\r\n      })\r\n    })\r\n\r\n    this._calculateTotalProgress()\r\n  }\r\n\r\n  _calculateTotalProgress () {\r\n    // calculate total progress, using the number of files currently uploading,\r\n    // multiplied by 100 and the summ of individual progress of each file\r\n    const files = Object.assign({}, this.getState().files)\r\n\r\n    const inProgress = Object.keys(files).filter((file) => {\r\n      return files[file].progress.uploadStarted\r\n    })\r\n    const progressMax = inProgress.length * 100\r\n    let progressAll = 0\r\n    inProgress.forEach((file) => {\r\n      progressAll = progressAll + files[file].progress.percentage\r\n    })\r\n\r\n    let totalProgress = progressMax === 0 ? 0 : Math.floor((progressAll * 100 / progressMax).toFixed(2))\r\n\r\n    // START because we are using photos that are already uploaded total Progress get NaN sometimes FINISH\r\n    if (isNaN(totalProgress)) {\r\n      totalProgress = 100\r\n    }\r\n\r\n    this.setState({\r\n      totalProgress: totalProgress\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Registers listeners for all global actions, like:\r\n   * `error`, `file-removed`, `upload-progress`\r\n   */\r\n  _addListeners () {\r\n    this.on('error', (error) => {\r\n      this.setState({ error: error.message })\r\n    })\r\n\r\n    this.on('upload-error', (file, error) => {\r\n      this.setFileState(file.id, { error: error.message })\r\n      this.setState({ error: error.message })\r\n\r\n      let message = this.i18n('failedToUpload', { file: file.name })\r\n      if (typeof error === 'object' && error.message) {\r\n        message = { message: message, details: error.message }\r\n      }\r\n      this.info(message, 'error', 5000)\r\n    })\r\n\r\n    this.on('upload', () => {\r\n      this.setState({ error: null })\r\n    })\r\n\r\n    this.on('upload-started', (file, upload) => {\r\n      if (!this.getFile(file.id)) {\r\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\r\n        return\r\n      }\r\n      this.setFileState(file.id, {\r\n        progress: {\r\n          uploadStarted: Date.now(),\r\n          uploadComplete: false,\r\n          percentage: 0,\r\n          bytesUploaded: 0,\r\n          bytesTotal: file.size\r\n        }\r\n      })\r\n    })\r\n\r\n    // upload progress events can occur frequently, especially when you have a good\r\n    // connection to the remote server. Therefore, we are throtteling them to\r\n    // prevent accessive function calls.\r\n    // see also: https://github.com/tus/tus-js-client/commit/9940f27b2361fd7e10ba58b09b60d82422183bbb\r\n    // const _throttledCalculateProgress = throttle(this._calculateProgress, 100, { leading: true, trailing: true })\r\n\r\n    this.on('upload-progress', this._calculateProgress)\r\n\r\n    this.on('upload-success', (file, uploadResp, uploadURL) => {\r\n      const currentProgress = this.getFile(file.id).progress\r\n      this.setFileState(file.id, {\r\n        progress: Object.assign({}, currentProgress, {\r\n          uploadComplete: true,\r\n          percentage: 100,\r\n          bytesUploaded: currentProgress.bytesTotal\r\n        }),\r\n        uploadURL: uploadURL,\r\n        isPaused: false\r\n      })\r\n\r\n      this._calculateTotalProgress()\r\n    })\r\n\r\n    this.on('preprocess-progress', (file, progress) => {\r\n      if (!this.getFile(file.id)) {\r\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\r\n        return\r\n      }\r\n      this.setFileState(file.id, {\r\n        progress: Object.assign({}, this.getFile(file.id).progress, {\r\n          preprocess: progress\r\n        })\r\n      })\r\n    })\r\n\r\n    this.on('preprocess-complete', (file) => {\r\n      if (!this.getFile(file.id)) {\r\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\r\n        return\r\n      }\r\n      const files = Object.assign({}, this.getState().files)\r\n      files[file.id] = Object.assign({}, files[file.id], {\r\n        progress: Object.assign({}, files[file.id].progress)\r\n      })\r\n      delete files[file.id].progress.preprocess\r\n\r\n      this.setState({ files: files })\r\n    })\r\n\r\n    this.on('postprocess-progress', (file, progress) => {\r\n      if (!this.getFile(file.id)) {\r\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\r\n        return\r\n      }\r\n      this.setFileState(file.id, {\r\n        progress: Object.assign({}, this.getState().files[file.id].progress, {\r\n          postprocess: progress\r\n        })\r\n      })\r\n    })\r\n\r\n    this.on('postprocess-complete', (file) => {\r\n      if (!this.getFile(file.id)) {\r\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\r\n        return\r\n      }\r\n      const files = Object.assign({}, this.getState().files)\r\n      files[file.id] = Object.assign({}, files[file.id], {\r\n        progress: Object.assign({}, files[file.id].progress)\r\n      })\r\n      delete files[file.id].progress.postprocess\r\n      // TODO should we set some kind of `fullyComplete` property on the file object\r\n      // so it's easier to see that the file is upload…fully complete…rather than\r\n      // what we have to do now (`uploadComplete && !postprocess`)\r\n\r\n      this.setState({ files: files })\r\n    })\r\n\r\n    this.on('restored', () => {\r\n      // Files may have changed--ensure progress is still accurate.\r\n      this._calculateTotalProgress()\r\n    })\r\n\r\n    // show informer if offline\r\n    if (typeof window !== 'undefined') {\r\n      window.addEventListener('online', () => this.updateOnlineStatus())\r\n      window.addEventListener('offline', () => this.updateOnlineStatus())\r\n      setTimeout(() => this.updateOnlineStatus(), 3000)\r\n    }\r\n  }\r\n\r\n  updateOnlineStatus () {\r\n    const online =\r\n      typeof window.navigator.onLine !== 'undefined'\r\n        ? window.navigator.onLine\r\n        : true\r\n    if (!online) {\r\n      this.emit('is-offline')\r\n      this.info(this.i18n('noInternetConnection'), 'error', 0)\r\n      this.wasOffline = true\r\n    } else {\r\n      this.emit('is-online')\r\n      if (this.wasOffline) {\r\n        this.emit('back-online')\r\n        this.info(this.i18n('connectedToInternet'), 'success', 3000)\r\n        this.wasOffline = false\r\n      }\r\n    }\r\n  }\r\n\r\n  getID () {\r\n    return this.opts.id\r\n  }\r\n\r\n  /**\r\n   * Registers a plugin with Core.\r\n   *\r\n   * @param {object} Plugin object\r\n   * @param {object} [opts] object with options to be passed to Plugin\r\n   * @return {Object} self for chaining\r\n   */\r\n  use (Plugin, opts) {\r\n    if (typeof Plugin !== 'function') {\r\n      let msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` +\r\n        ' Please verify that the plugin was imported and spelled correctly.'\r\n      throw new TypeError(msg)\r\n    }\r\n\r\n    // Instantiate\r\n    const plugin = new Plugin(this, opts)\r\n    const pluginId = plugin.id\r\n    this.plugins[plugin.type] = this.plugins[plugin.type] || []\r\n\r\n    if (!pluginId) {\r\n      throw new Error('Your plugin must have an id')\r\n    }\r\n\r\n    if (!plugin.type) {\r\n      throw new Error('Your plugin must have a type')\r\n    }\r\n\r\n    let existsPluginAlready = this.getPlugin(pluginId)\r\n    if (existsPluginAlready) {\r\n      let msg = `Already found a plugin named '${existsPluginAlready.id}'. ` +\r\n        `Tried to use: '${pluginId}'.\\n` +\r\n        `Uppy plugins must have unique 'id' options. See https://uppy.io/docs/plugins/#id.`\r\n      throw new Error(msg)\r\n    }\r\n\r\n    this.plugins[plugin.type].push(plugin)\r\n    plugin.install()\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Find one Plugin by name.\r\n   *\r\n   * @param {string} name description\r\n   * @return {object | boolean}\r\n   */\r\n  getPlugin (name) {\r\n    let foundPlugin = null\r\n    this.iteratePlugins((plugin) => {\r\n      const pluginName = plugin.id\r\n      if (pluginName === name) {\r\n        foundPlugin = plugin\r\n        return false\r\n      }\r\n    })\r\n    return foundPlugin\r\n  }\r\n\r\n  /**\r\n   * Iterate through all `use`d plugins.\r\n   *\r\n   * @param {function} method that will be run on each plugin\r\n   */\r\n  iteratePlugins (method) {\r\n    Object.keys(this.plugins).forEach(pluginType => {\r\n      this.plugins[pluginType].forEach(method)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Uninstall and remove a plugin.\r\n   *\r\n   * @param {object} instance The plugin instance to remove.\r\n   */\r\n  removePlugin (instance) {\r\n    this.log(`Removing plugin ${instance.id}`)\r\n    this.emit('plugin-remove', instance)\r\n\r\n    if (instance.uninstall) {\r\n      instance.uninstall()\r\n    }\r\n\r\n    const list = this.plugins[instance.type].slice()\r\n    const index = list.indexOf(instance)\r\n    if (index !== -1) {\r\n      list.splice(index, 1)\r\n      this.plugins[instance.type] = list\r\n    }\r\n\r\n    const updatedState = this.getState()\r\n    delete updatedState.plugins[instance.id]\r\n    this.setState(updatedState)\r\n  }\r\n\r\n  /**\r\n   * Uninstall all plugins and close down this Uppy instance.\r\n   */\r\n  close () {\r\n    this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`)\r\n\r\n    this.reset()\r\n\r\n    this._storeUnsubscribe()\r\n\r\n    this.iteratePlugins((plugin) => {\r\n      this.removePlugin(plugin)\r\n    })\r\n  }\r\n\r\n  /**\r\n  * Set info message in `state.info`, so that UI plugins like `Informer`\r\n  * can display the message.\r\n  *\r\n  * @param {string | object} message Message to be displayed by the informer\r\n  * @param {string} [type]\r\n  * @param {number} [duration]\r\n  */\r\n\r\n  info (message, type = 'info', duration = 3000) {\r\n    const isComplexMessage = typeof message === 'object'\r\n\r\n    this.setState({\r\n      info: {\r\n        isHidden: false,\r\n        type: type,\r\n        message: isComplexMessage ? message.message : message,\r\n        details: isComplexMessage ? message.details : null\r\n      }\r\n    })\r\n\r\n    this.emit('info-visible')\r\n\r\n    clearTimeout(this.infoTimeoutID)\r\n    if (duration === 0) {\r\n      this.infoTimeoutID = undefined\r\n      return\r\n    }\r\n\r\n    // hide the informer after `duration` milliseconds\r\n    this.infoTimeoutID = setTimeout(this.hideInfo, duration)\r\n  }\r\n\r\n  hideInfo () {\r\n    const newInfo = Object.assign({}, this.getState().info, {\r\n      isHidden: true\r\n    })\r\n    this.setState({\r\n      info: newInfo\r\n    })\r\n    this.emit('info-hidden')\r\n  }\r\n\r\n  /**\r\n   * Logs stuff to console, only if `debug` is set to true. Silent in production.\r\n   *\r\n   * @param {String|Object} msg to log\r\n   * @param {String} [type] optional `error` or `warning`\r\n   */\r\n  log (msg, type) {\r\n    if (!this.opts.debug) {\r\n      return\r\n    }\r\n\r\n    let message = `[Uppy] [${getTimeStamp()}] ${msg}`\r\n\r\n    window['uppyLog'] = window['uppyLog'] + '\\n' + 'DEBUG LOG: ' + msg\r\n\r\n    if (type === 'error') {\r\n      console.error(message)\r\n      return\r\n    }\r\n\r\n    if (type === 'warning') {\r\n      console.warn(message)\r\n      return\r\n    }\r\n\r\n    if (msg === `${msg}`) {\r\n      console.log(message)\r\n    } else {\r\n      message = `[Uppy] [${getTimeStamp()}]`\r\n      console.log(message)\r\n      console.dir(msg)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obsolete, event listeners are now added in the constructor.\r\n   */\r\n  run () {\r\n    this.log('Calling run() is no longer necessary.', 'warning')\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Restore an upload by its ID.\r\n   */\r\n  restore (uploadID) {\r\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`)\r\n\r\n    if (!this.getState().currentUploads[uploadID]) {\r\n      this._removeUpload(uploadID)\r\n      return Promise.reject(new Error('Nonexistent upload'))\r\n    }\r\n\r\n    return this._runUpload(uploadID)\r\n  }\r\n\r\n  /**\r\n   * Create an upload for a bunch of files.\r\n   *\r\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\r\n   * @return {string} ID of this upload.\r\n   */\r\n  _createUpload (fileIDs) {\r\n    const uploadID = cuid()\r\n\r\n    this.emit('upload', {\r\n      id: uploadID,\r\n      fileIDs: fileIDs\r\n    })\r\n\r\n    this.setState({\r\n      currentUploads: Object.assign({}, this.getState().currentUploads, {\r\n        [uploadID]: {\r\n          fileIDs: fileIDs,\r\n          step: 0,\r\n          result: {}\r\n        }\r\n      })\r\n    })\r\n\r\n    return uploadID\r\n  }\r\n\r\n  _getUpload (uploadID) {\r\n    return this.getState().currentUploads[uploadID]\r\n  }\r\n\r\n  /**\r\n   * Add data to an upload's result object.\r\n   *\r\n   * @param {string} uploadID The ID of the upload.\r\n   * @param {object} data Data properties to add to the result object.\r\n   */\r\n  addResultData (uploadID, data) {\r\n    if (!this._getUpload(uploadID)) {\r\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\r\n      return\r\n    }\r\n    const currentUploads = this.getState().currentUploads\r\n    const currentUpload = Object.assign({}, currentUploads[uploadID], {\r\n      result: Object.assign({}, currentUploads[uploadID].result, data)\r\n    })\r\n    this.setState({\r\n      currentUploads: Object.assign({}, currentUploads, {\r\n        [uploadID]: currentUpload\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Remove an upload, eg. if it has been canceled or completed.\r\n   *\r\n   * @param {string} uploadID The ID of the upload.\r\n   */\r\n  _removeUpload (uploadID) {\r\n    const currentUploads = Object.assign({}, this.getState().currentUploads)\r\n    delete currentUploads[uploadID]\r\n\r\n    this.setState({\r\n      currentUploads: currentUploads\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Run an upload. This picks up where it left off in case the upload is being restored.\r\n   *\r\n   * @private\r\n   */\r\n  _runUpload (uploadID) {\r\n    const uploadData = this.getState().currentUploads[uploadID]\r\n    const fileIDs = uploadData.fileIDs\r\n    const restoreStep = uploadData.step\r\n\r\n    const steps = [\r\n      ...this.preProcessors,\r\n      ...this.uploaders,\r\n      ...this.postProcessors\r\n    ]\r\n    let lastStep = Promise.resolve()\r\n    steps.forEach((fn, step) => {\r\n      // Skip this step if we are restoring and have already completed this step before.\r\n      if (step < restoreStep) {\r\n        return\r\n      }\r\n\r\n      lastStep = lastStep.then(() => {\r\n        const { currentUploads } = this.getState()\r\n        const currentUpload = Object.assign({}, currentUploads[uploadID], {\r\n          step: step\r\n        })\r\n        this.setState({\r\n          currentUploads: Object.assign({}, currentUploads, {\r\n            [uploadID]: currentUpload\r\n          })\r\n        })\r\n        // TODO give this the `currentUpload` object as its only parameter maybe?\r\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\r\n        return fn(fileIDs, uploadID)\r\n      }).then((result) => {\r\n        return null\r\n      })\r\n    })\r\n\r\n    // Not returning the `catch`ed promise, because we still want to return a rejected\r\n    // promise from this method if the upload failed.\r\n    lastStep.catch((err) => {\r\n      this.emit('error', err, uploadID)\r\n\r\n      this._removeUpload(uploadID)\r\n    })\r\n\r\n    return lastStep.then(() => {\r\n      const files = fileIDs.map((fileID) => this.getFile(fileID))\r\n      const successful = files.filter((file) => file && !file.error)\r\n      const failed = files.filter((file) => file && file.error)\r\n      this.addResultData(uploadID, { successful, failed, uploadID })\r\n\r\n      const { currentUploads } = this.getState()\r\n      if (!currentUploads[uploadID]) {\r\n        this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\r\n        return\r\n      }\r\n\r\n      const result = currentUploads[uploadID].result\r\n      this.emit('complete', result)\r\n\r\n      this._removeUpload(uploadID)\r\n\r\n      return result\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Start an upload for all the files that are not currently being uploaded.\r\n   *\r\n   * @return {Promise}\r\n   */\r\n  upload () {\r\n    if (!this.plugins.uploader) {\r\n      this.log('No uploader type plugins are used', 'warning')\r\n    }\r\n\r\n    let files = this.getState().files\r\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files)\r\n\r\n    if (onBeforeUploadResult === false) {\r\n      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'))\r\n    }\r\n\r\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\r\n      // warning after the change in 0.24\r\n      if (onBeforeUploadResult.then) {\r\n        throw new TypeError('onBeforeUpload() returned a Promise, but this is no longer supported. It must be synchronous.')\r\n      }\r\n\r\n      files = onBeforeUploadResult\r\n    }\r\n\r\n    return Promise.resolve()\r\n      .then(() => this._checkMinNumberOfFiles(files))\r\n      .then(() => {\r\n        const { currentUploads } = this.getState()\r\n        // get a list of files that are currently assigned to uploads\r\n        const currentlyUploadingFiles = Object.keys(currentUploads).reduce((prev, curr) => prev.concat(currentUploads[curr].fileIDs), [])\r\n\r\n        const waitingFileIDs = []\r\n        Object.keys(files).forEach((fileID) => {\r\n          const file = this.getFile(fileID)\r\n          // if the file hasn't started uploading and hasn't already been assigned to an upload..\r\n          if ((!file.progress.uploadStarted) && (currentlyUploadingFiles.indexOf(fileID) === -1)) {\r\n            waitingFileIDs.push(file.id)\r\n          }\r\n        })\r\n\r\n        const uploadID = this._createUpload(waitingFileIDs)\r\n        return this._runUpload(uploadID)\r\n      })\r\n      .catch((err) => {\r\n        const message = typeof err === 'object' ? err.message : err\r\n        const details = typeof err === 'object' ? err.details : null\r\n        this.log(`${message} ${details}`)\r\n        this.info({ message: message, details: details }, 'error', 4000)\r\n        return Promise.reject(typeof err === 'object' ? err : new Error(err))\r\n      })\r\n  }\r\n}\r\n\r\nmodule.exports = function (opts) {\r\n  return new Uppy(opts)\r\n}\r\n\r\n// Expose class constructor.\r\nmodule.exports.Uppy = Uppy\r\n"]}