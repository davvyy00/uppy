{"version":3,"sources":["../../src/core/Core.test.js"],"names":["fs","require","path","Core","Plugin","AcquirerPlugin1","AcquirerPlugin2","InvalidPlugin","InvalidPluginWithoutId","InvalidPluginWithoutType","jest","mock","sampleImage","readFileSync","join","__dirname","describe","RealCreateObjectUrl","global","URL","createObjectURL","beforeEach","fn","mockReturnValue","afterEach","it","core","expect","constructor","name","toEqual","getID","core2","id","use","Object","keys","plugins","acquirer","length","toThrowErrorMatchingSnapshot","getPlugin","plugin","iteratePlugins","run","mocks","calls","removePlugin","uninstall","updateAll","foo","update","stateUpdateEventMock","on","setState","bee","newState","capabilities","resumableUploads","files","currentUploads","info","isHidden","message","type","meta","totalProgress","getState","coreCancelEventMock","coreStateUpdateEventMock","reset","error","_createUpload","toBeDefined","cancelAll","toBeUndefined","close","addPreProcessor","fileIDs","uploadID","addResultData","pre","addPostProcessor","post","addUploader","upload","then","result","toBe","preprocessor","preProcessors","preprocessor1","preprocessor2","preprocessor3","removePreProcessor","addFile","source","data","File","fileId","file","getFile","emit","mode","value","progress","percentage","bytesUploaded","bytesTotal","uploadComplete","uploadStarted","preprocess","fileID","postprocessor","postProcessors","postprocessor1","postprocessor2","postprocessor3","removePostProcessor","substring","postprocess","uploader","uploaders","uploader1","uploader2","uploader3","removeUploader","onBeforeFileAdded","fileData","fileAddedEventMock","newFile","extension","isRemote","preview","undefined","remote","size","restrictions","allowedFileTypes","Error","err","getFiles","resolve","Uint8Array","resolves","toMatchObject","successful","failed","forEach","test","store","state","upload1","upload2","toMatchSnapshot","autoProceed","onBeforeUpload","catch","fileRemovedEventMock","removeFile","xit","Buffer","alloc","toHaveLength","map","sort","foo2","setMeta","bur","boo","setFileMeta","resize","_calculateProgress","file1","file2","setFileState","Date","_calculateTotalProgress","resetProgressEvent","resetProgress","maxNumberOfFiles","maxFileSize","RealNavigatorOnline","window","navigator","onLine","mockNavigatorOnline","status","defineProperty","writable","onlineEventMock","offlineEventMock","backOnlineEventMock","updateOnlineStatus","infoVisibleEvent","details","infoTimeoutID","done","infoHiddenEvent","setTimeout","hideInfo","uploadId","currentUploadsState","step","locale","strings","i18n","opts","minNumberOfFiles"],"mappings":"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","file":"Core.test.js","sourcesContent":["const fs = require('fs')\r\nconst path = require('path')\r\nconst Core = require('./Core')\r\nconst Plugin = require('./Plugin')\r\nconst AcquirerPlugin1 = require('../../test/mocks/acquirerPlugin1')\r\nconst AcquirerPlugin2 = require('../../test/mocks/acquirerPlugin2')\r\nconst InvalidPlugin = require('../../test/mocks/invalidPlugin')\r\nconst InvalidPluginWithoutId = require('../../test/mocks/invalidPluginWithoutId')\r\nconst InvalidPluginWithoutType = require('../../test/mocks/invalidPluginWithoutType')\r\n\r\njest.mock('cuid', () => {\r\n  return () => 'cjd09qwxb000dlql4tp4doz8h'\r\n})\r\njest.mock('../utils/findDOMElement', () => {\r\n  return () => null\r\n})\r\n\r\nconst sampleImage = fs.readFileSync(path.join(__dirname, '../../test/resources/image.jpg'))\r\n\r\ndescribe('src/Core', () => {\r\n  const RealCreateObjectUrl = global.URL.createObjectURL\r\n  beforeEach(() => {\r\n    global.URL.createObjectURL = jest.fn().mockReturnValue('newUrl')\r\n  })\r\n\r\n  afterEach(() => {\r\n    global.URL.createObjectURL = RealCreateObjectUrl\r\n  })\r\n\r\n  it('should expose a class', () => {\r\n    const core = Core()\r\n    expect(core.constructor.name).toEqual('Uppy')\r\n  })\r\n\r\n  it('should have a string `id` option that defaults to \"uppy\"', () => {\r\n    const core = Core()\r\n    expect(core.getID()).toEqual('uppy')\r\n\r\n    const core2 = Core({ id: 'profile' })\r\n    expect(core2.getID()).toEqual('profile')\r\n  })\r\n\r\n  describe('plugins', () => {\r\n    it('should add a plugin to the plugin stack', () => {\r\n      const core = Core()\r\n      core.use(AcquirerPlugin1)\r\n      expect(Object.keys(core.plugins.acquirer).length).toEqual(1)\r\n    })\r\n\r\n    it('should prevent the same plugin from being added more than once', () => {\r\n      const core = Core()\r\n      core.use(AcquirerPlugin1)\r\n\r\n      expect(() => {\r\n        core.use(AcquirerPlugin1)\r\n      }).toThrowErrorMatchingSnapshot()\r\n    })\r\n\r\n    it('should not be able to add an invalid plugin', () => {\r\n      const core = Core()\r\n\r\n      expect(() => {\r\n        core.use(InvalidPlugin)\r\n      }).toThrowErrorMatchingSnapshot()\r\n    })\r\n\r\n    it('should not be able to add a plugin that has no id', () => {\r\n      const core = Core()\r\n\r\n      expect(() =>\r\n        core.use(InvalidPluginWithoutId)\r\n      ).toThrowErrorMatchingSnapshot()\r\n    })\r\n\r\n    it('should not be able to add a plugin that has no type', () => {\r\n      const core = Core()\r\n\r\n      expect(() =>\r\n        core.use(InvalidPluginWithoutType)\r\n      ).toThrowErrorMatchingSnapshot()\r\n    })\r\n\r\n    it('should return the plugin that matches the specified name', () => {\r\n      const core = new Core()\r\n      expect(core.getPlugin('foo')).toEqual(null)\r\n\r\n      core.use(AcquirerPlugin1)\r\n      const plugin = core.getPlugin('TestSelector1')\r\n      expect(plugin.id).toEqual('TestSelector1')\r\n      expect(plugin instanceof Plugin)\r\n    })\r\n\r\n    it('should call the specified method on all the plugins', () => {\r\n      const core = new Core()\r\n      core.use(AcquirerPlugin1)\r\n      core.use(AcquirerPlugin2)\r\n      core.iteratePlugins(plugin => {\r\n        plugin.run('hello')\r\n      })\r\n      expect(core.plugins.acquirer[0].mocks.run.mock.calls.length).toEqual(1)\r\n      expect(core.plugins.acquirer[0].mocks.run.mock.calls[0]).toEqual([\r\n        'hello'\r\n      ])\r\n      expect(core.plugins.acquirer[1].mocks.run.mock.calls.length).toEqual(1)\r\n      expect(core.plugins.acquirer[1].mocks.run.mock.calls[0]).toEqual([\r\n        'hello'\r\n      ])\r\n    })\r\n\r\n    it('should uninstall and the remove the specified plugin', () => {\r\n      const core = new Core()\r\n      core.use(AcquirerPlugin1)\r\n      core.use(AcquirerPlugin2)\r\n      expect(Object.keys(core.plugins.acquirer).length).toEqual(2)\r\n\r\n      const plugin = core.getPlugin('TestSelector1')\r\n      core.removePlugin(plugin)\r\n      expect(Object.keys(core.plugins.acquirer).length).toEqual(1)\r\n      expect(plugin.mocks.uninstall.mock.calls.length).toEqual(1)\r\n      expect(core.plugins.acquirer[0].mocks.run.mock.calls.length).toEqual(0)\r\n    })\r\n  })\r\n\r\n  describe('state', () => {\r\n    it('should update all the plugins with the new state when the updateAll method is called', () => {\r\n      const core = new Core()\r\n      core.use(AcquirerPlugin1)\r\n      core.use(AcquirerPlugin2)\r\n      core.updateAll({ foo: 'bar' })\r\n      expect(core.plugins.acquirer[0].mocks.update.mock.calls.length).toEqual(1)\r\n      expect(core.plugins.acquirer[0].mocks.update.mock.calls[0]).toEqual([\r\n        { foo: 'bar' }\r\n      ])\r\n      expect(core.plugins.acquirer[1].mocks.update.mock.calls.length).toEqual(1)\r\n      expect(core.plugins.acquirer[1].mocks.update.mock.calls[0]).toEqual([\r\n        { foo: 'bar' }\r\n      ])\r\n    })\r\n\r\n    it('should update the state', () => {\r\n      const core = new Core()\r\n      const stateUpdateEventMock = jest.fn()\r\n      core.on('state-update', stateUpdateEventMock)\r\n      core.use(AcquirerPlugin1)\r\n      core.use(AcquirerPlugin2)\r\n\r\n      core.setState({ foo: 'bar', bee: 'boo' })\r\n      core.setState({ foo: 'baar' })\r\n\r\n      const newState = {\r\n        bee: 'boo',\r\n        capabilities: { resumableUploads: false },\r\n        files: {},\r\n        currentUploads: {},\r\n        foo: 'baar',\r\n        info: { isHidden: true, message: '', type: 'info' },\r\n        meta: {},\r\n        plugins: {},\r\n        totalProgress: 0\r\n      }\r\n\r\n      expect(core.getState()).toEqual(newState)\r\n\r\n      expect(core.plugins.acquirer[0].mocks.update.mock.calls[1]).toEqual([\r\n        newState\r\n      ])\r\n      expect(core.plugins.acquirer[1].mocks.update.mock.calls[1]).toEqual([\r\n        newState\r\n      ])\r\n\r\n      expect(stateUpdateEventMock.mock.calls.length).toEqual(2)\r\n      // current state\r\n      expect(stateUpdateEventMock.mock.calls[1][0]).toEqual({\r\n        bee: 'boo',\r\n        capabilities: { resumableUploads: false },\r\n        files: {},\r\n        currentUploads: {},\r\n        foo: 'bar',\r\n        info: { isHidden: true, message: '', type: 'info' },\r\n        meta: {},\r\n        plugins: {},\r\n        totalProgress: 0\r\n      })\r\n      // new state\r\n      expect(stateUpdateEventMock.mock.calls[1][1]).toEqual({\r\n        bee: 'boo',\r\n        capabilities: { resumableUploads: false },\r\n        files: {},\r\n        currentUploads: {},\r\n        foo: 'baar',\r\n        info: { isHidden: true, message: '', type: 'info' },\r\n        meta: {},\r\n        plugins: {},\r\n        totalProgress: 0\r\n      })\r\n    })\r\n\r\n    it('should get the state', () => {\r\n      const core = new Core()\r\n\r\n      core.setState({ foo: 'bar' })\r\n\r\n      expect(core.getState()).toEqual({\r\n        capabilities: { resumableUploads: false },\r\n        files: {},\r\n        currentUploads: {},\r\n        foo: 'bar',\r\n        info: { isHidden: true, message: '', type: 'info' },\r\n        meta: {},\r\n        plugins: {},\r\n        totalProgress: 0\r\n      })\r\n    })\r\n  })\r\n\r\n  it('should reset when the reset method is called', () => {\r\n    const core = new Core()\r\n    // const corePauseEventMock = jest.fn()\r\n    const coreCancelEventMock = jest.fn()\r\n    const coreStateUpdateEventMock = jest.fn()\r\n    core.on('cancel-all', coreCancelEventMock)\r\n    core.on('state-update', coreStateUpdateEventMock)\r\n    core.setState({ foo: 'bar', totalProgress: 30 })\r\n\r\n    core.reset()\r\n\r\n    // expect(corePauseEventMock.mock.calls.length).toEqual(1)\r\n    expect(coreCancelEventMock.mock.calls.length).toEqual(1)\r\n    expect(coreStateUpdateEventMock.mock.calls.length).toEqual(2)\r\n    expect(coreStateUpdateEventMock.mock.calls[1][1]).toEqual({\r\n      capabilities: { resumableUploads: false },\r\n      files: {},\r\n      currentUploads: {},\r\n      error: null,\r\n      foo: 'bar',\r\n      info: { isHidden: true, message: '', type: 'info' },\r\n      meta: {},\r\n      plugins: {},\r\n      totalProgress: 0\r\n    })\r\n  })\r\n\r\n  it('should clear all uploads on cancelAll()', () => {\r\n    const core = new Core()\r\n    const id = core._createUpload([ 'a', 'b' ])\r\n\r\n    expect(core.getState().currentUploads[id]).toBeDefined()\r\n\r\n    core.cancelAll()\r\n\r\n    expect(core.getState().currentUploads[id]).toBeUndefined()\r\n  })\r\n\r\n  it('should close, reset and uninstall when the close method is called', () => {\r\n    const core = new Core()\r\n    core.use(AcquirerPlugin1)\r\n\r\n    const coreCancelEventMock = jest.fn()\r\n    const coreStateUpdateEventMock = jest.fn()\r\n    const plugin = core.plugins.acquirer[0]\r\n\r\n    core.on('cancel-all', coreCancelEventMock)\r\n    core.on('state-update', coreStateUpdateEventMock)\r\n\r\n    core.close()\r\n\r\n    // expect(corePauseEventMock.mock.calls.length).toEqual(1)\r\n    expect(coreCancelEventMock.mock.calls.length).toEqual(1)\r\n    expect(coreStateUpdateEventMock.mock.calls.length).toEqual(1)\r\n    expect(coreStateUpdateEventMock.mock.calls[0][1]).toEqual({\r\n      capabilities: { resumableUploads: false },\r\n      files: {},\r\n      currentUploads: {},\r\n      error: null,\r\n      info: { isHidden: true, message: '', type: 'info' },\r\n      meta: {},\r\n      plugins: {},\r\n      totalProgress: 0\r\n    })\r\n    expect(plugin.mocks.uninstall.mock.calls.length).toEqual(1)\r\n    expect(core.plugins[Object.keys(core.plugins)[0]].length).toEqual(0)\r\n  })\r\n\r\n  describe('upload hooks', () => {\r\n    it('should add data returned from upload hooks to the .upload() result', () => {\r\n      const core = new Core()\r\n      core.addPreProcessor((fileIDs, uploadID) => {\r\n        core.addResultData(uploadID, { pre: 'ok' })\r\n      })\r\n      core.addPostProcessor((fileIDs, uploadID) => {\r\n        core.addResultData(uploadID, { post: 'ok' })\r\n      })\r\n      core.addUploader((fileIDs, uploadID) => {\r\n        core.addResultData(uploadID, { upload: 'ok' })\r\n      })\r\n      return core.upload().then((result) => {\r\n        expect(result.pre).toBe('ok')\r\n        expect(result.upload).toBe('ok')\r\n        expect(result.post).toBe('ok')\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('preprocessors', () => {\r\n    it('should add a preprocessor', () => {\r\n      const core = new Core()\r\n      const preprocessor = function () {}\r\n      core.addPreProcessor(preprocessor)\r\n      expect(core.preProcessors[0]).toEqual(preprocessor)\r\n    })\r\n\r\n    it('should remove a preprocessor', () => {\r\n      const core = new Core()\r\n      const preprocessor1 = function () {}\r\n      const preprocessor2 = function () {}\r\n      const preprocessor3 = function () {}\r\n      core.addPreProcessor(preprocessor1)\r\n      core.addPreProcessor(preprocessor2)\r\n      core.addPreProcessor(preprocessor3)\r\n      expect(core.preProcessors.length).toEqual(3)\r\n      core.removePreProcessor(preprocessor2)\r\n      expect(core.preProcessors.length).toEqual(2)\r\n    })\r\n\r\n    it('should execute all the preprocessors when uploading a file', () => {\r\n      const core = new Core()\r\n      const preprocessor1 = jest.fn()\r\n      const preprocessor2 = jest.fn()\r\n      core.addPreProcessor(preprocessor1)\r\n      core.addPreProcessor(preprocessor2)\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      return core.upload()\r\n        .then(() => {\r\n          const fileId = Object.keys(core.getState().files)[0]\r\n          expect(preprocessor1.mock.calls.length).toEqual(1)\r\n\r\n          expect(preprocessor1.mock.calls[0][0].length).toEqual(1)\r\n          expect(preprocessor1.mock.calls[0][0][0]).toEqual(fileId)\r\n\r\n          expect(preprocessor2.mock.calls[0][0].length).toEqual(1)\r\n          expect(preprocessor2.mock.calls[0][0][0]).toEqual(fileId)\r\n        })\r\n    })\r\n\r\n    it('should update the file progress state when preprocess-progress event is fired', () => {\r\n      const core = new Core()\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      const fileId = Object.keys(core.getState().files)[0]\r\n      const file = core.getFile(fileId)\r\n      core.emit('preprocess-progress', file, {\r\n        mode: 'determinate',\r\n        message: 'something',\r\n        value: 0\r\n      })\r\n      expect(core.getFile(fileId).progress).toEqual({\r\n        percentage: 0,\r\n        bytesUploaded: 0,\r\n        bytesTotal: 17175,\r\n        uploadComplete: false,\r\n        uploadStarted: false,\r\n        preprocess: { mode: 'determinate', message: 'something', value: 0 }\r\n      })\r\n    })\r\n\r\n    it('should update the file progress state when preprocess-complete event is fired', () => {\r\n      const core = new Core()\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      const fileID = Object.keys(core.getState().files)[0]\r\n      const file = core.getFile(fileID)\r\n      core.emit('preprocess-complete', file, {\r\n        mode: 'determinate',\r\n        message: 'something',\r\n        value: 0\r\n      })\r\n      expect(core.getFile(fileID).progress).toEqual({\r\n        percentage: 0,\r\n        bytesUploaded: 0,\r\n        bytesTotal: 17175,\r\n        uploadComplete: false,\r\n        uploadStarted: false\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('postprocessors', () => {\r\n    it('should add a postprocessor', () => {\r\n      const core = new Core()\r\n      const postprocessor = function () {}\r\n      core.addPostProcessor(postprocessor)\r\n      expect(core.postProcessors[0]).toEqual(postprocessor)\r\n    })\r\n\r\n    it('should remove a postprocessor', () => {\r\n      const core = new Core()\r\n      const postprocessor1 = function () {}\r\n      const postprocessor2 = function () {}\r\n      const postprocessor3 = function () {}\r\n      core.addPostProcessor(postprocessor1)\r\n      core.addPostProcessor(postprocessor2)\r\n      core.addPostProcessor(postprocessor3)\r\n      expect(core.postProcessors.length).toEqual(3)\r\n      core.removePostProcessor(postprocessor2)\r\n      expect(core.postProcessors.length).toEqual(2)\r\n    })\r\n\r\n    it('should execute all the postprocessors when uploading a file', () => {\r\n      const core = new Core()\r\n      const postprocessor1 = jest.fn()\r\n      const postprocessor2 = jest.fn()\r\n      core.addPostProcessor(postprocessor1)\r\n      core.addPostProcessor(postprocessor2)\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      return core.upload().then(() => {\r\n        expect(postprocessor1.mock.calls.length).toEqual(1)\r\n        // const lastModifiedTime = new Date()\r\n        // const fileId = 'foojpg' + lastModifiedTime.getTime()\r\n        const fileId = 'uppy-foojpg-image'\r\n\r\n        expect(postprocessor1.mock.calls[0][0].length).toEqual(1)\r\n        expect(postprocessor1.mock.calls[0][0][0].substring(0, 17)).toEqual(\r\n          fileId.substring(0, 17)\r\n        )\r\n\r\n        expect(postprocessor2.mock.calls[0][0].length).toEqual(1)\r\n        expect(postprocessor2.mock.calls[0][0][0].substring(0, 17)).toEqual(\r\n          fileId.substring(0, 17)\r\n        )\r\n      })\r\n    })\r\n\r\n    it('should update the file progress state when postprocess-progress event is fired', () => {\r\n      const core = new Core()\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      const fileId = Object.keys(core.getState().files)[0]\r\n      const file = core.getFile(fileId)\r\n      core.emit('postprocess-progress', file, {\r\n        mode: 'determinate',\r\n        message: 'something',\r\n        value: 0\r\n      })\r\n      expect(core.getFile(fileId).progress).toEqual({\r\n        percentage: 0,\r\n        bytesUploaded: 0,\r\n        bytesTotal: 17175,\r\n        uploadComplete: false,\r\n        uploadStarted: false,\r\n        postprocess: { mode: 'determinate', message: 'something', value: 0 }\r\n      })\r\n    })\r\n\r\n    it('should update the file progress state when postprocess-complete event is fired', () => {\r\n      const core = new Core()\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      const fileId = Object.keys(core.getState().files)[0]\r\n      const file = core.getFile(fileId)\r\n      core.emit('postprocess-complete', file, {\r\n        mode: 'determinate',\r\n        message: 'something',\r\n        value: 0\r\n      })\r\n      expect(core.getFile(fileId).progress).toEqual({\r\n        percentage: 0,\r\n        bytesUploaded: 0,\r\n        bytesTotal: 17175,\r\n        uploadComplete: false,\r\n        uploadStarted: false\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('uploaders', () => {\r\n    it('should add an uploader', () => {\r\n      const core = new Core()\r\n      const uploader = function () {}\r\n      core.addUploader(uploader)\r\n      expect(core.uploaders[0]).toEqual(uploader)\r\n    })\r\n\r\n    it('should remove an uploader', () => {\r\n      const core = new Core()\r\n      const uploader1 = function () {}\r\n      const uploader2 = function () {}\r\n      const uploader3 = function () {}\r\n      core.addUploader(uploader1)\r\n      core.addUploader(uploader2)\r\n      core.addUploader(uploader3)\r\n      expect(core.uploaders.length).toEqual(3)\r\n      core.removeUploader(uploader2)\r\n      expect(core.uploaders.length).toEqual(2)\r\n    })\r\n  })\r\n\r\n  describe('adding a file', () => {\r\n    it('should call onBeforeFileAdded if it was specified in the options when initialising the class', () => {\r\n      const onBeforeFileAdded = jest.fn()\r\n      const core = new Core({\r\n        onBeforeFileAdded\r\n      })\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      expect(onBeforeFileAdded.mock.calls.length).toEqual(1)\r\n      expect(onBeforeFileAdded.mock.calls[0][0].name).toEqual('foo.jpg')\r\n      expect(onBeforeFileAdded.mock.calls[0][1]).toEqual({})\r\n    })\r\n\r\n    it('should add a file', () => {\r\n      const fileData = new File([sampleImage], { type: 'image/jpeg' })\r\n      const fileAddedEventMock = jest.fn()\r\n      const core = new Core()\r\n      core.on('file-added', fileAddedEventMock)\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: fileData\r\n      })\r\n\r\n      const fileId = Object.keys(core.getState().files)[0]\r\n      const newFile = {\r\n        extension: 'jpg',\r\n        id: fileId,\r\n        isRemote: false,\r\n        meta: { name: 'foo.jpg', type: 'image/jpeg' },\r\n        name: 'foo.jpg',\r\n        preview: undefined,\r\n        data: fileData,\r\n        progress: {\r\n          bytesTotal: 17175,\r\n          bytesUploaded: 0,\r\n          percentage: 0,\r\n          uploadComplete: false,\r\n          uploadStarted: false\r\n        },\r\n        remote: '',\r\n        size: 17175,\r\n        source: 'jest',\r\n        type: 'image/jpeg'\r\n      }\r\n      expect(core.getFile(fileId)).toEqual(newFile)\r\n      expect(fileAddedEventMock.mock.calls[0][0]).toEqual(newFile)\r\n    })\r\n\r\n    it('should not allow a file that does not meet the restrictions', () => {\r\n      const core = new Core({\r\n        restrictions: {\r\n          allowedFileTypes: ['image/gif']\r\n        }\r\n      })\r\n      try {\r\n        core.addFile({\r\n          source: 'jest',\r\n          name: 'foo.jpg',\r\n          type: 'image/jpeg',\r\n          data: new File([sampleImage], { type: 'image/jpeg' })\r\n        })\r\n        throw new Error('File was allowed through')\r\n      } catch (err) {\r\n        expect(err.message).toEqual('You can only upload: image/gif')\r\n      }\r\n    })\r\n\r\n    it('should not allow a file if onBeforeFileAdded returned false', () => {\r\n      const core = new Core({\r\n        onBeforeFileAdded: (file, files) => {\r\n          if (file.source === 'jest') {\r\n            return false\r\n          }\r\n        }\r\n      })\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n      expect(core.getFiles().length).toEqual(0)\r\n    })\r\n  })\r\n\r\n  describe('uploading a file', () => {\r\n    it('should return a { successful, failed } pair containing file objects', () => {\r\n      const core = new Core()\r\n      core.addUploader((fileIDs) => Promise.resolve())\r\n\r\n      core.addFile({ source: 'jest', name: 'foo.jpg', type: 'image/jpeg', data: new Uint8Array() })\r\n      core.addFile({ source: 'jest', name: 'bar.jpg', type: 'image/jpeg', data: new Uint8Array() })\r\n\r\n      return expect(core.upload()).resolves.toMatchObject({\r\n        successful: [\r\n          { name: 'foo.jpg' },\r\n          { name: 'bar.jpg' }\r\n        ],\r\n        failed: []\r\n      })\r\n    })\r\n\r\n    it('should return files with errors in the { failed } key', () => {\r\n      const core = new Core()\r\n      core.addUploader((fileIDs) => {\r\n        fileIDs.forEach((fileID) => {\r\n          const file = core.getFile(fileID)\r\n          if (/bar/.test(file.name)) {\r\n            core.emit('upload-error', file, new Error('This is bar and I do not like bar'))\r\n          }\r\n        })\r\n        return Promise.resolve()\r\n      })\r\n\r\n      core.addFile({ source: 'jest', name: 'foo.jpg', type: 'image/jpeg', data: new Uint8Array() })\r\n      core.addFile({ source: 'jest', name: 'bar.jpg', type: 'image/jpeg', data: new Uint8Array() })\r\n\r\n      return expect(core.upload()).resolves.toMatchObject({\r\n        successful: [\r\n          { name: 'foo.jpg' }\r\n        ],\r\n        failed: [\r\n          { name: 'bar.jpg', error: 'This is bar and I do not like bar' }\r\n        ]\r\n      })\r\n    })\r\n\r\n    it('should only upload files that are not already assigned to another upload id', () => {\r\n      const core = new Core()\r\n      core.store.state.currentUploads = {\r\n        upload1: {\r\n          fileIDs: ['uppy-file1jpg-image/jpeg', 'uppy-file2jpg-image/jpeg', 'uppy-file3jpg-image/jpeg']\r\n        },\r\n        upload2: {\r\n          fileIDs: ['uppy-file4jpg-image/jpeg', 'uppy-file5jpg-image/jpeg', 'uppy-file6jpg-image/jpeg']\r\n        }\r\n      }\r\n      core.addUploader((fileIDs) => Promise.resolve())\r\n\r\n      core.addFile({ source: 'jest', name: 'foo.jpg', type: 'image/jpeg', data: new Uint8Array() })\r\n      core.addFile({ source: 'jest', name: 'bar.jpg', type: 'image/jpeg', data: new Uint8Array() })\r\n      core.addFile({ source: 'file3', name: 'file3.jpg', type: 'image/jpeg', data: new Uint8Array() })\r\n\r\n      return expect(core.upload()).resolves.toMatchSnapshot()\r\n    })\r\n\r\n    it('should not upload if onBeforeUpload returned false', () => {\r\n      const core = new Core({\r\n        autoProceed: false,\r\n        onBeforeUpload: (files) => {\r\n          for (var fileId in files) {\r\n            if (files[fileId].name === '123.foo') {\r\n              return false\r\n            }\r\n          }\r\n        }\r\n      })\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'bar.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: '123.foo',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n      return core.upload().catch((err) => {\r\n        expect(err).toMatchObject(new Error('Not starting the upload because onBeforeUpload returned false'))\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('removing a file', () => {\r\n    it('should remove the file', () => {\r\n      const fileRemovedEventMock = jest.fn()\r\n\r\n      const core = new Core()\r\n      core.on('file-removed', fileRemovedEventMock)\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      const fileId = Object.keys(core.getState().files)[0]\r\n      expect(core.getFiles().length).toEqual(1)\r\n      core.setState({\r\n        totalProgress: 50\r\n      })\r\n\r\n      const file = core.getFile(fileId)\r\n      core.removeFile(fileId)\r\n\r\n      expect(core.getFiles().length).toEqual(0)\r\n      expect(fileRemovedEventMock.mock.calls[0][0]).toEqual(file)\r\n      expect(core.getState().totalProgress).toEqual(0)\r\n    })\r\n  })\r\n\r\n  describe('restoring a file', () => {\r\n    xit('should restore a file', () => {})\r\n\r\n    xit(\"should fail to restore a file if it doesn't exist\", () => {})\r\n  })\r\n\r\n  describe('get a file', () => {\r\n    it('should get the specified file', () => {\r\n      const core = new Core()\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      const fileId = Object.keys(core.getState().files)[0]\r\n      expect(core.getFile(fileId).name).toEqual('foo.jpg')\r\n\r\n      expect(core.getFile('non existant file')).toEqual(undefined)\r\n    })\r\n  })\r\n\r\n  describe('getFiles', () => {\r\n    it('should return an empty array if there are no files', () => {\r\n      const core = new Core()\r\n\r\n      expect(core.getFiles()).toEqual([])\r\n    })\r\n\r\n    it('should return all files as an array', () => {\r\n      const core = new Core()\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'empty.dat',\r\n        type: 'application/octet-stream',\r\n        data: new File([Buffer.alloc(1000)], { type: 'application/octet-stream' })\r\n      })\r\n\r\n      expect(core.getFiles()).toHaveLength(2)\r\n      expect(core.getFiles().map((file) => file.name).sort()).toEqual(['empty.dat', 'foo.jpg'])\r\n    })\r\n  })\r\n\r\n  describe('meta data', () => {\r\n    it('should set meta data by calling setMeta', () => {\r\n      const core = new Core({\r\n        meta: { foo2: 'bar2' }\r\n      })\r\n      core.setMeta({ foo: 'bar', bur: 'mur' })\r\n      core.setMeta({ boo: 'moo', bur: 'fur' })\r\n      expect(core.getState().meta).toEqual({\r\n        foo: 'bar',\r\n        foo2: 'bar2',\r\n        boo: 'moo',\r\n        bur: 'fur'\r\n      })\r\n    })\r\n\r\n    it('should update meta data for a file by calling updateMeta', () => {\r\n      const core = new Core()\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      const fileId = Object.keys(core.getState().files)[0]\r\n      core.setFileMeta(fileId, { foo: 'bar', bur: 'mur' })\r\n      core.setFileMeta(fileId, { boo: 'moo', bur: 'fur' })\r\n      expect(core.getFile(fileId).meta).toEqual({\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        foo: 'bar',\r\n        bur: 'fur',\r\n        boo: 'moo'\r\n      })\r\n    })\r\n\r\n    it('should merge meta data when add file', () => {\r\n      const core = new Core({\r\n        meta: { foo2: 'bar2' }\r\n      })\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        meta: {\r\n          resize: 5000\r\n        },\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n      const fileId = Object.keys(core.getState().files)[0]\r\n      expect(core.getFile(fileId).meta).toEqual({\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        foo2: 'bar2',\r\n        resize: 5000\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('progress', () => {\r\n    it('should calculate the progress of a file upload', () => {\r\n      const core = new Core()\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      const fileId = Object.keys(core.getState().files)[0]\r\n      const file = core.getFile(fileId)\r\n      core._calculateProgress(file, {\r\n        bytesUploaded: 12345,\r\n        bytesTotal: 17175\r\n      })\r\n      expect(core.getFile(fileId).progress).toEqual({\r\n        percentage: 71,\r\n        bytesUploaded: 12345,\r\n        bytesTotal: 17175,\r\n        uploadComplete: false,\r\n        uploadStarted: false\r\n      })\r\n\r\n      core._calculateProgress(file, {\r\n        bytesUploaded: 17175,\r\n        bytesTotal: 17175\r\n      })\r\n      expect(core.getFile(fileId).progress).toEqual({\r\n        percentage: 100,\r\n        bytesUploaded: 17175,\r\n        bytesTotal: 17175,\r\n        uploadComplete: false,\r\n        uploadStarted: false\r\n      })\r\n    })\r\n\r\n    it('should calculate the total progress of all file uploads', () => {\r\n      const core = new Core()\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo2.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      const [file1, file2] = core.getFiles()\r\n      core.setFileState(file1.id, { progress: Object.assign({}, file1.progress, { uploadStarted: new Date() }) })\r\n      core.setFileState(file2.id, { progress: Object.assign({}, file2.progress, { uploadStarted: new Date() }) })\r\n\r\n      core._calculateProgress(core.getFile(file1.id), {\r\n        bytesUploaded: 12345,\r\n        bytesTotal: 17175\r\n      })\r\n\r\n      core._calculateProgress(core.getFile(file2.id), {\r\n        bytesUploaded: 10201,\r\n        bytesTotal: 17175\r\n      })\r\n\r\n      core._calculateTotalProgress()\r\n      expect(core.getState().totalProgress).toEqual(65)\r\n    })\r\n\r\n    it('should reset the progress', () => {\r\n      const resetProgressEvent = jest.fn()\r\n      const core = new Core()\r\n      core.on('reset-progress', resetProgressEvent)\r\n\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo2.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      const [file1, file2] = core.getFiles()\r\n      core.setFileState(file1.id, { progress: Object.assign({}, file1.progress, { uploadStarted: new Date() }) })\r\n      core.setFileState(file2.id, { progress: Object.assign({}, file2.progress, { uploadStarted: new Date() }) })\r\n\r\n      core._calculateProgress(core.getFile(file1.id), {\r\n        bytesUploaded: 12345,\r\n        bytesTotal: 17175\r\n      })\r\n\r\n      core._calculateProgress(core.getFile(file2.id), {\r\n        bytesUploaded: 10201,\r\n        bytesTotal: 17175\r\n      })\r\n\r\n      core._calculateTotalProgress()\r\n\r\n      expect(core.getState().totalProgress).toEqual(65)\r\n\r\n      core.resetProgress()\r\n\r\n      expect(core.getFile(file1.id).progress).toEqual({\r\n        percentage: 0,\r\n        bytesUploaded: 0,\r\n        bytesTotal: 17175,\r\n        uploadComplete: false,\r\n        uploadStarted: false\r\n      })\r\n      expect(core.getFile(file2.id).progress).toEqual({\r\n        percentage: 0,\r\n        bytesUploaded: 0,\r\n        bytesTotal: 17175,\r\n        uploadComplete: false,\r\n        uploadStarted: false\r\n      })\r\n      expect(core.getState().totalProgress).toEqual(0)\r\n      expect(resetProgressEvent.mock.calls.length).toEqual(1)\r\n    })\r\n  })\r\n\r\n  describe('checkRestrictions', () => {\r\n    it('should enforce the maxNumberOfFiles rule', () => {\r\n      const core = new Core({\r\n        autoProceed: false,\r\n        restrictions: {\r\n          maxNumberOfFiles: 1\r\n        }\r\n      })\r\n\r\n      // add 2 files\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo1.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n      try {\r\n        core.addFile({\r\n          source: 'jest',\r\n          name: 'foo2.jpg',\r\n          type: 'image/jpeg',\r\n          data: new File([sampleImage], { type: 'image/jpeg' })\r\n        })\r\n        throw new Error('should have thrown')\r\n      } catch (err) {\r\n        expect(err).toMatchObject(new Error('You can only upload 1 file'))\r\n        expect(core.getState().info.message).toEqual('You can only upload 1 file')\r\n      }\r\n    })\r\n\r\n    xit('should enforce the minNumberOfFiles rule', () => {})\r\n\r\n    it('should enforce the allowedFileTypes rule', () => {\r\n      const core = new Core({\r\n        autoProceed: false,\r\n        restrictions: {\r\n          allowedFileTypes: ['image/gif', 'image/png']\r\n        }\r\n      })\r\n\r\n      try {\r\n        core.addFile({\r\n          source: 'jest',\r\n          name: 'foo2.jpg',\r\n          type: 'image/jpeg',\r\n          data: new File([sampleImage], { type: 'image/jpeg' })\r\n        })\r\n        throw new Error('should have thrown')\r\n      } catch (err) {\r\n        expect(err).toMatchObject(new Error('You can only upload: image/gif, image/png'))\r\n        expect(core.getState().info.message).toEqual('You can only upload: image/gif, image/png')\r\n      }\r\n    })\r\n\r\n    it('should enforce the allowedFileTypes rule with file extensions', () => {\r\n      const core = new Core({\r\n        autoProceed: false,\r\n        restrictions: {\r\n          allowedFileTypes: ['.gif', '.jpg', '.jpeg']\r\n        }\r\n      })\r\n\r\n      try {\r\n        core.addFile({\r\n          source: 'jest',\r\n          name: 'foo2.png',\r\n          type: '',\r\n          data: new File([sampleImage], { type: 'image/jpeg' })\r\n        })\r\n        throw new Error('should have thrown')\r\n      } catch (err) {\r\n        expect(err).toMatchObject(new Error('You can only upload: .gif, .jpg, .jpeg'))\r\n        expect(core.getState().info.message).toEqual('You can only upload: .gif, .jpg, .jpeg')\r\n      }\r\n    })\r\n\r\n    it('should enforce the maxFileSize rule', () => {\r\n      const core = new Core({\r\n        autoProceed: false,\r\n        restrictions: {\r\n          maxFileSize: 1234\r\n        }\r\n      })\r\n\r\n      try {\r\n        core.addFile({\r\n          source: 'jest',\r\n          name: 'foo.jpg',\r\n          type: 'image/jpeg',\r\n          data: new File([sampleImage], { type: 'image/jpeg' })\r\n        })\r\n        throw new Error('should have thrown')\r\n      } catch (err) {\r\n        expect(err).toMatchObject(new Error('This file exceeds maximum allowed size of 1.2 KB'))\r\n        expect(core.getState().info.message).toEqual('This file exceeds maximum allowed size of 1.2 KB')\r\n      }\r\n    })\r\n  })\r\n\r\n  describe('actions', () => {\r\n    it('should update the state when receiving the error event', () => {\r\n      const core = new Core()\r\n      core.emit('error', new Error('foooooo'))\r\n      expect(core.getState().error).toEqual('foooooo')\r\n    })\r\n\r\n    it('should update the state when receiving the upload-error event', () => {\r\n      const core = new Core()\r\n      core.setState({\r\n        files: {\r\n          fileId: {\r\n            id: 'fileId',\r\n            name: 'filename'\r\n          }\r\n        }\r\n      })\r\n      core.emit('upload-error', core.getFile('fileId'), new Error('this is the error'))\r\n      expect(core.getState().info).toEqual({'message': 'Failed to upload filename', 'details': 'this is the error', 'isHidden': false, 'type': 'error'})\r\n    })\r\n\r\n    it('should reset the error state when receiving the upload event', () => {\r\n      const core = new Core()\r\n      core.emit('error', { foo: 'bar' })\r\n      core.emit('upload')\r\n      expect(core.getState().error).toEqual(null)\r\n    })\r\n  })\r\n\r\n  describe('updateOnlineStatus', () => {\r\n    const RealNavigatorOnline = global.window.navigator.onLine\r\n\r\n    function mockNavigatorOnline (status) {\r\n      Object.defineProperty(\r\n        global.window.navigator,\r\n        'onLine',\r\n        {\r\n          value: status,\r\n          writable: true\r\n        }\r\n      )\r\n    }\r\n\r\n    afterEach(() => {\r\n      global.window.navigator.onLine = RealNavigatorOnline\r\n    })\r\n\r\n    it('should emit the correct event based on whether there is a network connection', () => {\r\n      const onlineEventMock = jest.fn()\r\n      const offlineEventMock = jest.fn()\r\n      const backOnlineEventMock = jest.fn()\r\n      const core = new Core()\r\n      core.on('is-offline', offlineEventMock)\r\n      core.on('is-online', onlineEventMock)\r\n      core.on('back-online', backOnlineEventMock)\r\n\r\n      mockNavigatorOnline(true)\r\n      core.updateOnlineStatus()\r\n      expect(onlineEventMock.mock.calls.length).toEqual(1)\r\n      expect(offlineEventMock.mock.calls.length).toEqual(0)\r\n      expect(backOnlineEventMock.mock.calls.length).toEqual(0)\r\n\r\n      mockNavigatorOnline(false)\r\n      core.updateOnlineStatus()\r\n      expect(onlineEventMock.mock.calls.length).toEqual(1)\r\n      expect(offlineEventMock.mock.calls.length).toEqual(1)\r\n      expect(backOnlineEventMock.mock.calls.length).toEqual(0)\r\n\r\n      mockNavigatorOnline(true)\r\n      core.updateOnlineStatus()\r\n      expect(onlineEventMock.mock.calls.length).toEqual(2)\r\n      expect(offlineEventMock.mock.calls.length).toEqual(1)\r\n      expect(backOnlineEventMock.mock.calls.length).toEqual(1)\r\n    })\r\n  })\r\n\r\n  describe('info', () => {\r\n    it('should set a string based message to be displayed infinitely', () => {\r\n      const infoVisibleEvent = jest.fn()\r\n      const core = new Core()\r\n      core.on('info-visible', infoVisibleEvent)\r\n\r\n      core.info('This is the message', 'info', 0)\r\n      expect(core.getState().info).toEqual({\r\n        isHidden: false,\r\n        type: 'info',\r\n        message: 'This is the message',\r\n        details: null\r\n      })\r\n      expect(infoVisibleEvent.mock.calls.length).toEqual(1)\r\n      expect(typeof core.infoTimeoutID).toEqual('undefined')\r\n    })\r\n\r\n    it('should set a object based message to be displayed infinitely', () => {\r\n      const infoVisibleEvent = jest.fn()\r\n      const core = new Core()\r\n      core.on('info-visible', infoVisibleEvent)\r\n\r\n      core.info({\r\n        message: 'This is the message',\r\n        details: {\r\n          foo: 'bar'\r\n        }\r\n      }, 'warning', 0)\r\n      expect(core.getState().info).toEqual({\r\n        isHidden: false,\r\n        type: 'warning',\r\n        message: 'This is the message',\r\n        details: {\r\n          foo: 'bar'\r\n        }\r\n      })\r\n      expect(infoVisibleEvent.mock.calls.length).toEqual(1)\r\n      expect(typeof core.infoTimeoutID).toEqual('undefined')\r\n    })\r\n\r\n    it('should set an info message to be displayed for a period of time before hiding', (done) => {\r\n      const infoVisibleEvent = jest.fn()\r\n      const infoHiddenEvent = jest.fn()\r\n      const core = new Core()\r\n      core.on('info-visible', infoVisibleEvent)\r\n      core.on('info-hidden', infoHiddenEvent)\r\n\r\n      core.info('This is the message', 'info', 100)\r\n      expect(typeof core.infoTimeoutID).toEqual('number')\r\n      expect(infoHiddenEvent.mock.calls.length).toEqual(0)\r\n      setTimeout(() => {\r\n        expect(infoHiddenEvent.mock.calls.length).toEqual(1)\r\n        expect(core.getState().info).toEqual({\r\n          isHidden: true,\r\n          type: 'info',\r\n          message: 'This is the message',\r\n          details: null\r\n        })\r\n        done()\r\n      }, 110)\r\n    })\r\n\r\n    it('should hide an info message', () => {\r\n      const infoVisibleEvent = jest.fn()\r\n      const infoHiddenEvent = jest.fn()\r\n      const core = new Core()\r\n      core.on('info-visible', infoVisibleEvent)\r\n      core.on('info-hidden', infoHiddenEvent)\r\n\r\n      core.info('This is the message', 'info', 0)\r\n      expect(typeof core.infoTimeoutID).toEqual('undefined')\r\n      expect(infoHiddenEvent.mock.calls.length).toEqual(0)\r\n      core.hideInfo()\r\n      expect(infoHiddenEvent.mock.calls.length).toEqual(1)\r\n      expect(core.getState().info).toEqual({\r\n        isHidden: true,\r\n        type: 'info',\r\n        message: 'This is the message',\r\n        details: null\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('createUpload', () => {\r\n    it('should assign the specified files to a new upload', () => {\r\n      const core = new Core()\r\n      core.addFile({\r\n        source: 'jest',\r\n        name: 'foo.jpg',\r\n        type: 'image/jpeg',\r\n        data: new File([sampleImage], { type: 'image/jpeg' })\r\n      })\r\n\r\n      core._createUpload(Object.keys(core.getState().files))\r\n      const uploadId = Object.keys(core.getState().currentUploads)[0]\r\n      const currentUploadsState = {}\r\n      currentUploadsState[uploadId] = {\r\n        fileIDs: Object.keys(core.getState().files),\r\n        step: 0,\r\n        result: {}\r\n      }\r\n      expect(core.getState().currentUploads).toEqual(currentUploadsState)\r\n    })\r\n  })\r\n\r\n  describe('i18n', () => {\r\n    it('merges in custom locale strings', () => {\r\n      const core = new Core({\r\n        locale: {\r\n          strings: {\r\n            test: 'beep boop'\r\n          }\r\n        }\r\n      })\r\n\r\n      expect(core.i18n('exceedsSize')).toBe('This file exceeds maximum allowed size of')\r\n      expect(core.i18n('test')).toBe('beep boop')\r\n    })\r\n  })\r\n\r\n  describe('default restrictions', () => {\r\n    it('should be merged with supplied restrictions', () => {\r\n      const core = new Core({\r\n        restrictions: {\r\n          maxNumberOfFiles: 3\r\n        }\r\n      })\r\n\r\n      expect(core.opts.restrictions.maxNumberOfFiles).toBe(3)\r\n      expect(core.opts.restrictions.minNumberOfFiles).toBe(null)\r\n    })\r\n  })\r\n})\r\n"]}