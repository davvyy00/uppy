{"version":3,"sources":["../../src/utils/getFileType.test.js"],"names":["getFileType","require","describe","it","file","isRemote","type","name","expect","toEqual","data","fileMP3","fileYAML","fileMKV"],"mappings":"AAAA,IAAMA,cAAcC,QAAQ,eAAR,CAApB;;AAEAC,SAAS,aAAT,EAAwB,YAAM;AAC5BC,KAAG,kEAAH,EAAuE,YAAM;AAC3E,QAAMC,OAAO;AACXC,gBAAU,IADC;AAEXC,YAAM,YAFK;AAGXC,YAAM;AAHK,KAAb;AAKAC,WAAOR,YAAYI,IAAZ,CAAP,EAA0BK,OAA1B,CAAkC,YAAlC;AACD,GAPD;;AASAN,KAAG,iDAAH,EAAsD,YAAM;AAC1D,QAAMC,OAAO;AACXE,YAAM,YADK;AAEXC,YAAM,UAFK;AAGXG,YAAM;AAHK,KAAb;AAKAF,WAAOR,YAAYI,IAAZ,CAAP,EAA0BK,OAA1B,CAAkC,YAAlC;AACD,GAPD;;AASAN,KAAG,kDAAH,EAAuD,YAAM;AAC3D,QAAMQ,UAAU;AACdJ,YAAM,SADQ;AAEdG,YAAM;AAFQ,KAAhB;AAIA,QAAME,WAAW;AACfL,YAAM,UADS;AAEfG,YAAM;AAFS,KAAjB;AAIA,QAAMG,UAAU;AACdN,YAAM,SADQ;AAEdG,YAAM;AAFQ,KAAhB;AAIAF,WAAOR,YAAYW,OAAZ,CAAP,EAA6BF,OAA7B,CAAqC,WAArC;AACAD,WAAOR,YAAYY,QAAZ,CAAP,EAA8BH,OAA9B,CAAsC,WAAtC;AACAD,WAAOR,YAAYa,OAAZ,CAAP,EAA6BJ,OAA7B,CAAqC,kBAArC;AACD,GAhBD;;AAkBAN,KAAG,4CAAH,EAAiD,YAAM;AACrD,QAAMC,OAAO;AACXG,YAAM,QADK;AAEXG,YAAM;AAFK,KAAb;AAIAF,WAAOR,YAAYI,IAAZ,CAAP,EAA0BK,OAA1B,CAAkC,IAAlC;AACD,GAND;AAOD,CA5CD","file":"getFileType.test.js","sourcesContent":["const getFileType = require('./getFileType')\r\n\r\ndescribe('getFileType', () => {\r\n  it('should trust the filetype if the file comes from a remote source', () => {\r\n    const file = {\r\n      isRemote: true,\r\n      type: 'audio/webm',\r\n      name: 'foo.webm'\r\n    }\r\n    expect(getFileType(file)).toEqual('audio/webm')\r\n  })\r\n\r\n  it('should determine the filetype from the mimetype', () => {\r\n    const file = {\r\n      type: 'audio/webm',\r\n      name: 'foo.webm',\r\n      data: 'sdfsdfhq9efbicw'\r\n    }\r\n    expect(getFileType(file)).toEqual('audio/webm')\r\n  })\r\n\r\n  it('should determine the filetype from the extension', () => {\r\n    const fileMP3 = {\r\n      name: 'foo.mp3',\r\n      data: 'sdfsfhfh329fhwihs'\r\n    }\r\n    const fileYAML = {\r\n      name: 'bar.yaml',\r\n      data: 'sdfsfhfh329fhwihs'\r\n    }\r\n    const fileMKV = {\r\n      name: 'bar.mkv',\r\n      data: 'sdfsfhfh329fhwihs'\r\n    }\r\n    expect(getFileType(fileMP3)).toEqual('audio/mp3')\r\n    expect(getFileType(fileYAML)).toEqual('text/yaml')\r\n    expect(getFileType(fileMKV)).toEqual('video/x-matroska')\r\n  })\r\n\r\n  it('should fail gracefully if unable to detect', () => {\r\n    const file = {\r\n      name: 'foobar',\r\n      data: 'sdfsfhfh329fhwihs'\r\n    }\r\n    expect(getFileType(file)).toEqual(null)\r\n  })\r\n})\r\n"]}