{"version":3,"sources":["../../src/utils/limitPromises.test.js"],"names":["limitPromises","require","describe","pending","fn","resolve","setTimeout","then","it","limit","fn2","result","all","expect","toBe","Infinity"],"mappings":";;AAAA,IAAMA,gBAAgBC,QAAQ,iBAAR,CAAtB;;AAEAC,SAAS,eAAT,EAA0B,YAAM;AAC9B,MAAIC,UAAU,CAAd;AACA,WAASC,EAAT,GAAe;AACbD;AACA,WAAO,aAAY,UAACE,OAAD;AAAA,aAAaC,WAAWD,OAAX,EAAoB,EAApB,CAAb;AAAA,KAAZ,EACFE,IADE,CACG;AAAA,aAAMJ,SAAN;AAAA,KADH,CAAP;AAED;;AAEDK,KAAG,gDAAH,EAAqD,YAAM;AACzD,QAAMC,QAAQT,cAAc,CAAd,CAAd;AACA,QAAMU,MAAMD,MAAML,EAAN,CAAZ;;AAEA,QAAMO,SAAS,SAAQC,GAAR,CAAY,CACzBF,KADyB,EAClBA,KADkB,EACXA,KADW,EACJA,KADI,EAEzBA,KAFyB,EAElBA,KAFkB,EAEXA,KAFW,EAEJA,KAFI,EAGzBA,KAHyB,EAGlBA,KAHkB,CAAZ,CAAf;;AAMAG,WAAOV,OAAP,EAAgBW,IAAhB,CAAqB,CAArB;AACAR,eAAW,YAAM;AACfO,aAAOV,OAAP,EAAgBW,IAAhB,CAAqB,CAArB;AACD,KAFD,EAEG,EAFH;;AAIA,WAAOH,OAAOJ,IAAP,CAAY,YAAM;AACvBM,aAAOV,OAAP,EAAgBW,IAAhB,CAAqB,CAArB;AACD,KAFM,CAAP;AAGD,GAlBD;;AAoBAN,KAAG,iCAAH,EAAsC,YAAM;AAC1C,QAAMC,QAAQT,cAAce,QAAd,CAAd;AACA,QAAML,MAAMD,MAAML,EAAN,CAAZ;;AAEA,QAAMO,SAAS,SAAQC,GAAR,CAAY,CACzBF,KADyB,EAClBA,KADkB,EACXA,KADW,EACJA,KADI,EAEzBA,KAFyB,EAElBA,KAFkB,EAEXA,KAFW,EAEJA,KAFI,EAGzBA,KAHyB,EAGlBA,KAHkB,CAAZ,CAAf;;AAMAG,WAAOV,OAAP,EAAgBW,IAAhB,CAAqB,EAArB;;AAEA,WAAOH,OAAOJ,IAAP,CAAY,YAAM;AACvBM,aAAOV,OAAP,EAAgBW,IAAhB,CAAqB,CAArB;AACD,KAFM,CAAP;AAGD,GAfD;AAgBD,CA5CD","file":"limitPromises.test.js","sourcesContent":["const limitPromises = require('./limitPromises')\r\n\r\ndescribe('limitPromises', () => {\r\n  let pending = 0\r\n  function fn () {\r\n    pending++\r\n    return new Promise((resolve) => setTimeout(resolve, 10))\r\n        .then(() => pending--)\r\n  }\r\n\r\n  it('should run at most N promises at the same time', () => {\r\n    const limit = limitPromises(4)\r\n    const fn2 = limit(fn)\r\n\r\n    const result = Promise.all([\r\n      fn2(), fn2(), fn2(), fn2(),\r\n      fn2(), fn2(), fn2(), fn2(),\r\n      fn2(), fn2()\r\n    ])\r\n\r\n    expect(pending).toBe(4)\r\n    setTimeout(() => {\r\n      expect(pending).toBe(4)\r\n    }, 10)\r\n\r\n    return result.then(() => {\r\n      expect(pending).toBe(0)\r\n    })\r\n  })\r\n\r\n  it('should accept Infinity as limit', () => {\r\n    const limit = limitPromises(Infinity)\r\n    const fn2 = limit(fn)\r\n\r\n    const result = Promise.all([\r\n      fn2(), fn2(), fn2(), fn2(),\r\n      fn2(), fn2(), fn2(), fn2(),\r\n      fn2(), fn2()\r\n    ])\r\n\r\n    expect(pending).toBe(10)\r\n\r\n    return result.then(() => {\r\n      expect(pending).toBe(0)\r\n    })\r\n  })\r\n})\r\n"]}