{"version":3,"sources":["../../src/utils/canvasToBlob.js"],"names":["dataURItoBlob","require","module","exports","canvasToBlob","canvas","type","quality","toBlob","resolve","then","toDataURL"],"mappings":";;AAAA,IAAMA,gBAAgBC,QAAQ,iBAAR,CAAtB;;AAEA;;;;;;AAMAC,OAAOC,OAAP,GAAiB,SAASC,YAAT,CAAuBC,MAAvB,EAA+BC,IAA/B,EAAqCC,OAArC,EAA8C;AAC7D,MAAIF,OAAOG,MAAX,EAAmB;AACjB,WAAO,aAAY,UAACC,OAAD,EAAa;AAC9BJ,aAAOG,MAAP,CAAcC,OAAd,EAAuBH,IAAvB,EAA6BC,OAA7B;AACD,KAFM,CAAP;AAGD;AACD,SAAO,SAAQE,OAAR,GAAkBC,IAAlB,CAAuB,YAAM;AAClC,WAAOV,cAAcK,OAAOM,SAAP,CAAiBL,IAAjB,EAAuBC,OAAvB,CAAd,EAA+C,EAA/C,CAAP;AACD,GAFM,CAAP;AAGD,CATD","file":"canvasToBlob.js","sourcesContent":["const dataURItoBlob = require('./dataURItoBlob')\r\n\r\n/**\r\n * Save a <canvas> element's content to a Blob object.\r\n *\r\n * @param {HTMLCanvasElement} canvas\r\n * @return {Promise}\r\n */\r\nmodule.exports = function canvasToBlob (canvas, type, quality) {\r\n  if (canvas.toBlob) {\r\n    return new Promise((resolve) => {\r\n      canvas.toBlob(resolve, type, quality)\r\n    })\r\n  }\r\n  return Promise.resolve().then(() => {\r\n    return dataURItoBlob(canvas.toDataURL(type, quality), {})\r\n  })\r\n}\r\n"]}