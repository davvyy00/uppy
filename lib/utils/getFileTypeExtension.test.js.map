{"version":3,"sources":["../../src/utils/getFileTypeExtension.test.js"],"names":["getFileTypeExtension","require","describe","it","expect","toEqual"],"mappings":"AAAA,IAAMA,uBAAuBC,QAAQ,wBAAR,CAA7B;;AAEAC,SAAS,sBAAT,EAAiC,YAAM;AACrCC,KAAG,6DAAH,EAAkE,YAAM;AACtEC,WAAOJ,qBAAqB,WAArB,CAAP,EAA0CK,OAA1C,CAAkD,KAAlD;AACAD,WAAOJ,qBAAqB,WAArB,CAAP,EAA0CK,OAA1C,CAAkD,KAAlD;AACAD,WAAOJ,qBAAqB,YAArB,CAAP,EAA2CK,OAA3C,CAAmD,MAAnD;AACAD,WAAOJ,qBAAqB,YAArB,CAAP,EAA2CK,OAA3C,CAAmD,MAAnD;AACAD,WAAOJ,qBAAqB,WAArB,CAAP,EAA0CK,OAA1C,CAAkD,KAAlD;AACAD,WAAOJ,qBAAqB,WAArB,CAAP,EAA0CK,OAA1C,CAAkD,KAAlD;AACAD,WAAOJ,qBAAqB,SAArB,CAAP,EAAwCK,OAAxC,CAAgD,IAAhD;AACD,GARD;AASD,CAVD","file":"getFileTypeExtension.test.js","sourcesContent":["const getFileTypeExtension = require('./getFileTypeExtension')\r\n\r\ndescribe('getFileTypeExtension', () => {\r\n  it('should return the filetype based on the specified mime type', () => {\r\n    expect(getFileTypeExtension('video/ogg')).toEqual('ogv')\r\n    expect(getFileTypeExtension('audio/ogg')).toEqual('ogg')\r\n    expect(getFileTypeExtension('video/webm')).toEqual('webm')\r\n    expect(getFileTypeExtension('audio/webm')).toEqual('webm')\r\n    expect(getFileTypeExtension('video/mp4')).toEqual('mp4')\r\n    expect(getFileTypeExtension('audio/mp3')).toEqual('mp3')\r\n    expect(getFileTypeExtension('foo/bar')).toEqual(null)\r\n  })\r\n})\r\n"]}