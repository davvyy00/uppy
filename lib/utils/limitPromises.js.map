{"version":3,"sources":["../../src/utils/limitPromises.js"],"names":["module","exports","limitPromises","limit","pending","queue","fn","args","call","promise","then","onfinish","resolve","reject","push","next","shift"],"mappings":";;AAAA;;;;;;;;AAQAA,OAAOC,OAAP,GAAiB,SAASC,aAAT,CAAwBC,KAAxB,EAA+B;AAC9C,MAAIC,UAAU,CAAd;AACA,MAAMC,QAAQ,EAAd;AACA,SAAO,UAACC,EAAD,EAAQ;AACb,WAAO,YAAa;AAAA,wCAATC,IAAS;AAATA,YAAS;AAAA;;AAClB,UAAMC,OAAO,SAAPA,IAAO,GAAM;AACjBJ;AACA,YAAMK,UAAUH,oBAAMC,IAAN,CAAhB;AACAE,gBAAQC,IAAR,CAAaC,QAAb,EAAuBA,QAAvB;AACA,eAAOF,OAAP;AACD,OALD;;AAOA,UAAIL,WAAWD,KAAf,EAAsB;AACpB,eAAO,aAAY,UAACS,OAAD,EAAUC,MAAV,EAAqB;AACtCR,gBAAMS,IAAN,CAAW,YAAM;AACfN,mBAAOE,IAAP,CAAYE,OAAZ,EAAqBC,MAArB;AACD,WAFD;AAGD,SAJM,CAAP;AAKD;AACD,aAAOL,MAAP;AACD,KAhBD;AAiBD,GAlBD;AAmBA,WAASG,QAAT,GAAqB;AACnBP;AACA,QAAMW,OAAOV,MAAMW,KAAN,EAAb;AACA,QAAID,IAAJ,EAAUA;AACX;AACF,CA3BD","file":"limitPromises.js","sourcesContent":["/**\r\n * Limit the amount of simultaneously pending Promises.\r\n * Returns a function that, when passed a function `fn`,\r\n * will make sure that at most `limit` calls to `fn` are pending.\r\n *\r\n * @param {number} limit\r\n * @return {function()}\r\n */\r\nmodule.exports = function limitPromises (limit) {\r\n  let pending = 0\r\n  const queue = []\r\n  return (fn) => {\r\n    return (...args) => {\r\n      const call = () => {\r\n        pending++\r\n        const promise = fn(...args)\r\n        promise.then(onfinish, onfinish)\r\n        return promise\r\n      }\r\n\r\n      if (pending >= limit) {\r\n        return new Promise((resolve, reject) => {\r\n          queue.push(() => {\r\n            call().then(resolve, reject)\r\n          })\r\n        })\r\n      }\r\n      return call()\r\n    }\r\n  }\r\n  function onfinish () {\r\n    pending--\r\n    const next = queue.shift()\r\n    if (next) next()\r\n  }\r\n}\r\n"]}