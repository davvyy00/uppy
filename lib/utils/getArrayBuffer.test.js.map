{"version":3,"sources":["../../src/utils/getArrayBuffer.test.js"],"names":["getArrayBuffer","require","describe","beforeEach","global","FileReader","addEventListener","e","cb","loadCb","errorCb","readAsArrayBuffer","chunk","target","result","ArrayBuffer","afterEach","undefined","it","then","expect","buffer","toEqual","byteLength"],"mappings":";;;;AAAA,IAAMA,iBAAiBC,QAAQ,kBAAR,CAAvB;;AAEAC,SAAS,gBAAT,EAA2B,YAAM;AAC/BC,aAAW,YAAM;AACfC,WAAOC,UAAP;AAAA;AAAA;AAAA;;AAAA,2BACEC,gBADF,6BACoBC,CADpB,EACuBC,EADvB,EAC2B;AACvB,YAAID,MAAM,MAAV,EAAkB;AAChB,eAAKE,MAAL,GAAcD,EAAd;AACD;AACD,YAAID,MAAM,OAAV,EAAmB;AACjB,eAAKG,OAAL,GAAeF,EAAf;AACD;AACF,OARH;;AAAA,2BASEG,iBATF,8BASqBC,KATrB,EAS4B;AACxB,aAAKH,MAAL,CAAY,EAAEI,QAAQ,EAAEC,QAAQ,IAAIC,WAAJ,CAAgB,CAAhB,CAAV,EAAV,EAAZ;AACD,OAXH;;AAAA;AAAA;AAaD,GAdD;;AAgBAC,YAAU,YAAM;AACdZ,WAAOC,UAAP,GAAoBY,SAApB;AACD,GAFD;;AAIAC,KAAG,gEAAH,EAAqE,YAAM;AACzE,WAAOlB,eAAe,OAAf,EAAwBmB,IAAxB,CAA6B,kBAAU;AAC5CC,oBAAcC,MAAd,yCAAcA,MAAd,GAAsBC,OAAtB,CAA8B,QAA9B;AACAF,aAAOC,OAAOE,UAAd,EAA0BD,OAA1B,CAAkC,CAAlC;AACD,KAHM,CAAP;AAID,GALD;AAMD,CA3BD","file":"getArrayBuffer.test.js","sourcesContent":["const getArrayBuffer = require('./getArrayBuffer')\r\n\r\ndescribe('getArrayBuffer', () => {\r\n  beforeEach(() => {\r\n    global.FileReader = class FileReader {\r\n      addEventListener (e, cb) {\r\n        if (e === 'load') {\r\n          this.loadCb = cb\r\n        }\r\n        if (e === 'error') {\r\n          this.errorCb = cb\r\n        }\r\n      }\r\n      readAsArrayBuffer (chunk) {\r\n        this.loadCb({ target: { result: new ArrayBuffer(8) } })\r\n      }\r\n      }\r\n  })\r\n\r\n  afterEach(() => {\r\n    global.FileReader = undefined\r\n  })\r\n\r\n  it('should return a promise that resolves with the specified chunk', () => {\r\n    return getArrayBuffer('abcde').then(buffer => {\r\n      expect(typeof buffer).toEqual('object')\r\n      expect(buffer.byteLength).toEqual(8)\r\n    })\r\n  })\r\n})\r\n"]}