{"version":3,"sources":["../../src/store/DefaultStore.test.js"],"names":["DefaultStore","require","describe","it","store","expect","toBe","getState","toEqual","setState","a","b","expected","calls","listener","prevState","nextState","patch","subscribe"],"mappings":";;AAAA,IAAMA,eAAeC,QAAQ,gBAAR,CAArB;;AAEAC,SAAS,cAAT,EAAyB,YAAM;AAC7BC,KAAG,oCAAH,EAAyC,YAAM;AAC7C,QAAIC,QAAQJ,cAAZ;AACAK,kBAAcD,KAAd,yCAAcA,KAAd,GAAqBE,IAArB,CAA0B,QAA1B;AACAF,YAAQ,IAAIJ,YAAJ,EAAR;AACAK,kBAAcD,KAAd,yCAAcA,KAAd,GAAqBE,IAArB,CAA0B,QAA1B;AACD,GALD;;AAOAH,KAAG,kCAAH,EAAuC,YAAM;AAC3C,QAAMC,QAAQJ,cAAd;AACAK,WAAOD,MAAMG,QAAN,EAAP,EAAyBC,OAAzB,CAAiC,EAAjC;;AAEAJ,UAAMK,QAAN,CAAe;AACbC,SAAG,CADU;AAEbC,SAAG;AAFU,KAAf;AAIAN,WAAOD,MAAMG,QAAN,EAAP,EAAyBC,OAAzB,CAAiC,EAAEE,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAjC;;AAEAP,UAAMK,QAAN,CAAe,EAAEE,GAAG,CAAL,EAAf;AACAN,WAAOD,MAAMG,QAAN,EAAP,EAAyBC,OAAzB,CAAiC,EAAEE,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAjC;AACD,GAZD;;AAcAR,KAAG,2CAAH,EAAgD,YAAM;AACpD,QAAIS,WAAW,EAAf;AACA,QAAIC,QAAQ,CAAZ;AACA,aAASC,QAAT,CAAmBC,SAAnB,EAA8BC,SAA9B,EAAyCC,KAAzC,EAAgD;AAC9CJ;AACAR,aAAO,CAAEU,SAAF,EAAaC,SAAb,EAAwBC,KAAxB,CAAP,EAAwCT,OAAxC,CAAgDI,QAAhD;AACD;;AAED,QAAMR,QAAQJ,cAAd;AACAI,UAAMc,SAAN,CAAgBJ,QAAhB;;AAEAF,eAAW,CAAC,EAAD,EAAK,EAAEF,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAL,EAAqB,EAAED,GAAG,CAAL,EAAQC,GAAG,CAAX,EAArB,CAAX;AACAP,UAAMK,QAAN,CAAe;AACbC,SAAG,CADU;AAEbC,SAAG;AAFU,KAAf;;AAKAC,eAAW,CAAC,EAAEF,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAD,EAAiB,EAAED,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAjB,EAAiC,EAAEA,GAAG,CAAL,EAAjC,CAAX;AACAP,UAAMK,QAAN,CAAe,EAAEE,GAAG,CAAL,EAAf;;AAEAN,WAAOQ,KAAP,EAAcP,IAAd,CAAmB,CAAnB;AACD,GArBD;AAsBD,CA5CD","file":"DefaultStore.test.js","sourcesContent":["const DefaultStore = require('./DefaultStore')\r\n\r\ndescribe('DefaultStore', () => {\r\n  it('can be created with or without new', () => {\r\n    let store = DefaultStore()\r\n    expect(typeof store).toBe('object')\r\n    store = new DefaultStore()\r\n    expect(typeof store).toBe('object')\r\n  })\r\n\r\n  it('merges in state using `setState`', () => {\r\n    const store = DefaultStore()\r\n    expect(store.getState()).toEqual({})\r\n\r\n    store.setState({\r\n      a: 1,\r\n      b: 2\r\n    })\r\n    expect(store.getState()).toEqual({ a: 1, b: 2 })\r\n\r\n    store.setState({ b: 3 })\r\n    expect(store.getState()).toEqual({ a: 1, b: 3 })\r\n  })\r\n\r\n  it('notifies subscriptions when state changes', () => {\r\n    let expected = []\r\n    let calls = 0\r\n    function listener (prevState, nextState, patch) {\r\n      calls++\r\n      expect([ prevState, nextState, patch ]).toEqual(expected)\r\n    }\r\n\r\n    const store = DefaultStore()\r\n    store.subscribe(listener)\r\n\r\n    expected = [{}, { a: 1, b: 2 }, { a: 1, b: 2 }]\r\n    store.setState({\r\n      a: 1,\r\n      b: 2\r\n    })\r\n\r\n    expected = [{ a: 1, b: 2 }, { a: 1, b: 3 }, { b: 3 }]\r\n    store.setState({ b: 3 })\r\n\r\n    expect(calls).toBe(2)\r\n  })\r\n})\r\n"]}